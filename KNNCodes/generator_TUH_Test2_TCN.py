# -*- coding: utf-8 -*-
"""Copy of TCN_Example_Bahareh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcSy2-BXUmAPwJeWSyDy84Wq6-ZWfR-5
"""

from cProfile import label
import multiprocessing
import os
import sys
from tabnanny import check
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="2"
import tensorflow as tf
import scipy
import h5py
import glob, os
from scipy.io import loadmat
import math
from keras.models import Model
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
import collections
# from parse_label import parse_event_labels
# %matplotlib inline
# from keras.datasets import mnist
from sklearn.metrics import plot_precision_recall_curve,roc_curve,roc_auc_score,auc
from sklearn.metrics import precision_recall_fscore_support,precision_recall_curve
import itertools
from tensorflow import keras
from tensorflow.keras.regularizers import l2, l1_l2
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,TimeDistributed, GRU,Concatenate
from tensorflow.keras.optimizers import Adam
from keras.layers import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, GlobalAveragePooling1D,MaxPooling1D,AveragePooling1D
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn import preprocessing
from keras import regularizers
from numpy import mean
from numpy import std
from tqdm.auto import tqdm
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
# from keras.optimizers import Adam
# from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, MaxPooling1D, ZeroPadding1D, GlobalAveragePooling1D,Bidirectional
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import LearningRateScheduler
from sklearn import preprocessing
from sklearn.metrics import roc_auc_score
# from keras import regularizers
# from regularizers import l1_l2
from numpy import mean
from numpy import std
import pickle
import re
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
import time
import gc
from keras import backend as K
from keras.preprocessing.image import ImageDataGenerator
import math
from collections import deque
#import wandb
#from wandb.keras import WandbCallback

# datagen = ImageDataGenerator(zca_whitening=True)
# from google.colab import drive
# drive.mount('/content/drive')

from keras_tcn import TCN
from SBRNN_Keras import ModelConfig, SBRNN_Detector, ModelConfigTCN
import copy

def PatientsEDFFile(dirname):

  os.chdir(dirname)
  a=[]
  X=[]
  Y=[]
  b=[]
  c = []
  k=0
  for file in glob.glob("*.pkl"):

    split_file=file.split('.')
    print(split_file[0])
    split_file2=split_file[0].split('_')
    b.append(split_file2[2]+'_'+split_file2[3]+'_'+split_file2[4]+'_'+split_file2[5])
    a.append(file)
    c.append(split_file[0])

      # print(a)
  return a,b,c

def recall2(y_true, y_pred):

  true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
  possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
  recall_m = true_positives / (possible_positives + K.epsilon())
  return recall_m

def precision(y_true, y_pred):

  true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
  predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
  precision_m = true_positives / (predicted_positives + K.epsilon())
  return precision_m

def AUCPR(y_true, y_pred):

  precision, recall, _ = precision_recall_curve(y_true, y_pred)

  PR1=auc(recall, precision)

  return PR1
# def f1_score(y_true, y_pred):
  # precision_m = precision(y_true, y_pred)
  # recall_m = recall(y_true, y_pred)
  # return 2*((precision_m*recall_m)/(precision_m+recall_m+K.epsilon()))
def f1_score(y_true, y_pred,threshold_shift=0):

  y_pred = K.clip(y_pred, 0, 1)
  # shifting the prediction threshold from .5 if needed
  y_pred_bin = K.round(y_pred + threshold_shift)
  tp = K.sum(K.round(y_true * y_pred_bin)) + K.epsilon()
  fp = K.sum(K.round(K.clip(y_pred_bin - y_true, 0, 1)))
  fn = K.sum(K.round(K.clip(y_true - y_pred, 0, 1)))
  precision1 = tp / (tp + fp)
  recall1 = tp / (tp + fn)
  p = precision1
  r = recall1
  return 2 * ((p * r) / (p + r))

def auc_roc(y_true, y_pred):

  return tf.py_function(roc_auc_score, (y_true, y_pred), tf.double)

def auc_pr(y_true, y_pred):

  return tf.py_function(AUCPR, (y_true, y_pred), tf.double)


def  Conv_BN_Act_Pool(filtNo,filtsize1,filtsize2,input1,activation,PoolSize,l2_size,drop_size):


  conv1 = Conv1D(filtNo,filtsize1,kernel_regularizer=l2(l2_size))(input1)
  conv2 = Conv1D(filtNo, filtsize2,kernel_regularizer=l2(l2_size))(conv1)
  BN=BatchNormalization(axis=-1)(conv2)
  ActFunc=Activation(activation)(BN)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc)
  # out=Dropout(drop_size)(pool1)

  return pool1

def define_CNN(drop_size,initLR):
  l2_size=None
  input_shape=(1000,20)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)

  denseout = Dense(100)(flat)
  denseout2 = Dense(50)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)
  # define a model with a list of two inputs
  model = Model(inputs=input1, outputs=output)
  model.compile(optimizer=Adam(learning_rate=initLR),loss='binary_crossentropy',metrics=["accuracy",f1_score,auc_roc,precision,recall2,auc_pr])

  return model

def MeanStdVar(mylist):


  ListMean=np.mean(mylist,axis=0)
  ListStd=np.std(mylist)
  ListVar=np.var(mylist)

  return ListMean,ListStd,ListVar

def lr_exp_decay(epoch, lr):
  # k = math.sqrt(2)
  k=2
  if epoch<100:
    return lr
  elif lr>0.00001 & epoch>100:
    return lr / k

def Plot_func(SaveHisResults,metric,metric_val,metric_name,modelname,epoch,batchSize):


  metric_mean,metric_std,_=MeanStdVar(metric)
  metric_val_mean,metric_val_std,_=MeanStdVar(metric_val)


  plt.plot(metric_mean)
  plt.plot(metric_val_mean)
  plt.title(modelname+'_'+metric_name+'epoch_'+str(epoch)+'_batchsize_'+str(batchSize))
  plt.legend(['train', 'test'], loc='upper left')

  plt.fill_between(range(epoch), metric_mean-metric_std, metric_mean+metric_std, color='blue', alpha = 0.5)
  plt.fill_between(range(epoch), metric_val_mean-metric_val_std, metric_val_mean+metric_val_std, color='orange', alpha = 0.5)

  plt.ylabel('%')
  plt.xlabel('epoch')
  plt.savefig(SaveHisResults+'/'+'history_'+modelname+'_'+metric_name+'_epoch_'+str(epoch)+'_batchsize_'+str(batchSize)+'.pdf', format='pdf', bbox_inches = 'tight')
  plt.clf()

def train_test_split(new_dict,focal_No,gen_No):

    train=[]
    test=[]

    focal_list=new_dict.item()['header_focal']

    generalized_list=new_dict.item()['header_generalized']


    test=[*focal_list[-5:],*generalized_list[-5:]]


    train=[*focal_list[0:focal_No],*generalized_list[0:gen_No]]
    #train=[*focal_list[-5:],*generalized_list[-5:]]

    return train,test

def find_indices(pid,name):

  index=[]
  for j in range(len(name)):
      index.append([i for i, e in enumerate(pid) if e == name[j]])

  return index

def create_sub_seq(nn_input, len_ss, labels=None):
    """
    This function creates all sub sequences for the batch
    """
    # print(nn_input.shape)
    n_seq = nn_input.shape[0]

    len_seq = nn_input.shape[1]

    # print(n_seq)
    # print(len_seq)

    n_ss = len_seq - len_ss + 1
    new_labels = []
    if nn_input.ndim == 3:
      new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2]))
    elif nn_input.ndim == 4:

      new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2], nn_input.shape[3]))

    # print(new_inp.shape)
    if labels is not None:
        dim_labels = labels.shape
        if len(dim_labels) == 2:
            new_labels = np.zeros((n_ss*n_seq, len_ss))

            # print(new_labels.shape)
        elif len(dim_labels) == 3:
            new_labels = np.zeros((n_ss * n_seq, len_ss, dim_labels[2]))
    k = 0
    for i in range(n_seq):
        for j in range(n_ss):
            new_inp[k, :, :] = nn_input[i, j:j + len_ss, :]
            if labels is not None:
                if len(dim_labels) == 2:
                    new_labels[k, :] = labels[i, j:j + len_ss]
                elif len(dim_labels) == 3:
                    new_labels[k, :, :] = labels[i, j:j + len_ss, :]
            k += 1

    return new_inp, n_ss, new_labels

def creat_sub_seq_models(x,y,n_chan,tcn,cnn,two_dcnn,gru,len_seq,len_seq_gru):

  if tcn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]

  if cnn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1]*one_sec_samp,n_chan))
    y_new = y_new[:,last_element-1]
    y_new = np.expand_dims(y_new, axis=1)

  if gru == 1:

    x_new = np.reshape(x_new, (1,x_new.shape[0], x_new.shape[1]*one_sec_samp,n_chan))
    y_new = y_new[:,last_element-1]
    y_new = np.expand_dims(y_new, axis=0)
    x_new, _,y_new = create_sub_seq(x_new, len_seq_gru, y_new)

  if two_dcnn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]
    x_new = np.reshape(x_new, (x_new.shape[0], n_chan, x_new.shape[1]*one_sec_samp))
    y_new = y_new[:,last_element-1]
    y_new = np.expand_dims(y_new, axis=1)

  return x_new, y_new

def create_csv_files(dirname,dir_csv,index,category_name,n_chan,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru):

    main,pid, name_csv = PatientsEDFFile(dirname)

    ind=find_indices(pid,index)
    index_v2=list(itertools.chain.from_iterable(ind))
    
    names = []
    size = []

    data=[]
    label=[]
    for i in range(len(index_v2)):

      path=os.path.join(dirname,main[index_v2[i]])
      names.append(path)
      print(name_csv[index_v2[i]])
      pkl = pickle.load(open(path , 'rb'))

      x=pkl.data
    #print(x.shape)
      sig=pkl.data_preprocess
      fs = 250
      data_len = sig.shape[1]
      sig_segment = []
      for k in range(0, data_len, fs):
        sig_segment.append(sig[:,k:k+fs])
      sig_segment = np.array(sig_segment)
      # print(sig_segment.shape)
      seizure_index=[7,8,9,10,11,12,13,14,15,16,17]
      labels = pkl.tse_label_matrix
      tse_split = [1 if ((x==seizure_index).any()) else 0 for x in labels]
      # sig = loadmat(files[i])
      x = sig_segment
      y = tse_split


      ###################### take 3 times before and after of the seizure ####################

      start = pkl.seizure_start
      stop = pkl.seizure_end
      desired_intv = 3

      signal_new = x

      seizure_duration = stop - start
      new_sig_start = start - desired_intv * seizure_duration
      new_sig_end = stop + desired_intv * seizure_duration
      if new_sig_start < 0:
          new_sig_start = 0
      if new_sig_end > len(y):
          new_sig_end = len(y)
      original_start_index = int(np.floor(new_sig_start))
      original_stop_index = int(np.floor(new_sig_end))
      x = signal_new[original_start_index:original_stop_index]
      tse_split = y[original_start_index:original_stop_index] 
      y = tse_split
      ####################
      # print(x.shape)
      #print(y.shape)
      x = np.array(x)
      y = np.array(y)
      y = np.expand_dims(y, axis=0)
      print(x.shape)
      print(y.shape)

      df = pd.DataFrame(columns=['FileName', 'Label', 'index'])
      for j in range(x.shape[0]):
        # print(type(y[:,j][0]))
        df = df.append({'FileName':path , 'Label': y[:,j][0],'index': np.int64(j)},ignore_index=True)
      df.to_csv(os.path.join(os.path.join(dir_csv,f'data_files/{category_name}'), f'{name_csv[index_v2[i]]}.csv'))
    print(len(names))


      # return x,y,names

# from numpy.core.numeric import indices
def file_generator(data_path,data_files,temporal_stride=1,temporal_length=8):

  '''
  data_files - list of csv files to be read.
  '''
  for f in data_files:
     # read all the csv files (one csv file corresponds to one vdieo) in data_files one by one
    tmp_df = pd.read_csv(os.path.join(data_path,f))
    label_list = list(tmp_df['Label'])  # Load all the labels in the label_list
    index_list = list(tmp_df['index'])
    total_images = len(label_list) 
    if total_images>=temporal_length: # only if the number of frames in the video is greater tha temporal length, use that video
      num_samples = int((total_images-temporal_length)/temporal_stride)+1
      print ('num of samples from vid seq-{}: {}'.format(f,num_samples))
      img_list = list(tmp_df['FileName'])
    else: # if the number of frames are less than temporal length , discard it
      print ('num of frames is less than temporal length; hence discarding this file-{}'.format(f))
      continue

    start_frame = 0
    samples = deque() # initliaze a queue to store the frames 
    labels = deque()
    indices = deque()
    samp_count=0 # a counter to count the number of smaple. one smaple has as many frames as defined by temporal length
    for j  in range(len(img_list)):
      samples.append(img_list[j])
      labels.append(label_list[j])
      indices.append(index_list[j])
      if len(samples)==temporal_length:
         #if the queue has as many frames as temporal length, return it as one sample

        samples_c = copy.deepcopy(samples)
        lables_c = copy.deepcopy(labels) # copy the queue as in the next stage frames would be popped
        indices_c = copy.deepcopy(indices)
        samp_count+=1

        for t in range(temporal_stride): # pop out as many frames as described by the stride from the left to accomodate new frames
          samples.popleft()
          labels.popleft()
          indices_c.pop
          # print(list(indices_c).pop(0))

        yield samples_c, list(lables_c), list(indices_c)[-temporal_length:]# return a sample(consisting of as many frames as defined by temporal length) 
                                          # and its corsponding label
def load_samples(dir_csv,data_cat='train',temporal_stride=1,temporal_length=8):
    data_path = os.path.join(dir_csv,f'data_files/{data_cat}')
    data_files = os.listdir(data_path)
    # define a generator to read the samples
    file_gen = file_generator(data_path,data_files,temporal_stride,temporal_length)
    iterator = True
    data_list = []
    while iterator:
        try:
            x, y, index = next(file_gen)
            x=list(x)
            data_list.append([x,y,index])
        except Exception as e:
            print ('the exception: ',e)
            iterator = False
            print ('end of data generator')
    return data_list
  
def load_samples_modified(dir_csv,data_cat,temporal_stride,temporal_length,num_csv):
  
    data_path = os.path.join(dir_csv,f'data_files/{data_cat}')
    data_csv_list = os.listdir(data_path)

    data_shuffle = shuffle(data_csv_list)
    data_files = data_shuffle[0:num_csv]
    # define a generator to read the samples
    file_gen = file_generator(data_path,data_files,temporal_stride,temporal_length)
    iterator = True
    data_list = []
    while iterator:
        try:
            x, y, index = next(file_gen)
            x=list(x)
            data_list.append([x,y,index])
        except Exception as e:
            print ('the exception: ',e)
            iterator = False
            print ('end of data generator')
    return data_list
  

def shuffle_data(samples):
    data = shuffle(samples,random_state=2)
    return data


def data_generator_modified(dir_csv,data_cat,temporal_stride,temporal_length,num_csv,batch_size=256,temporal_padding='same',shuffle=True):         
      
  """
  Yields the next training batch.
  Suppose `samples` is an array [[image1_filename,label1], [image2_filename,label2],...].
  """
  data = load_samples_modified(dir_csv,data_cat,temporal_stride,temporal_length,num_csv)
  num_samples = len(data)
  if shuffle:
      data = shuffle_data(data)
  while True:   

    for offset in range(0, (num_samples//batch_size)*batch_size, batch_size):
      # print ('startring index: ', offset) 
      # Get the samples you'll use in this batch
      batch_samples = data[offset:offset+batch_size]
      # Initialise X_train and y_train arrays for this batch
      x_train = []
      y_train = []
      # For each example
      for batch_sample in batch_samples:

        # Load image (X)
        x = batch_sample[0]
        y = batch_sample[1]
        temp_data_list = []
        pkl = pickle.load(open(batch_sample[0][0] , 'rb'))

        x=pkl.data
      #print(x.shape)
        sig=pkl.data_preprocess
        fs = 250
        data_len = sig.shape[1]
        sig_segment = []
        for k in range(0, data_len, fs):
          sig_segment.append(sig[:,k:k+fs])
        sig_segment = np.array(sig_segment)
        # print(sig_segment.shape)
        seizure_index=[7,8,9,10,11,12,13,14,15,16,17]
        labels = pkl.tse_label_matrix
        x = sig_segment
        tse_split = [1 if ((x==seizure_index).any()) else 0 for x in labels]
        y_check = tse_split
      # print(sig_segment.shape)
  


        ###################### take 3 times before and after of the seizure ####################

        start = pkl.seizure_start
        stop = pkl.seizure_end
        desired_intv = 3

        signal_new = x

        seizure_duration = stop - start
        new_sig_start = start - desired_intv * seizure_duration
        new_sig_end = stop + desired_intv * seizure_duration
        if new_sig_start < 0:
            new_sig_start = 0
        if new_sig_end > len(y_check):
            new_sig_end = len(y_check)
        original_start_index = int(np.floor(new_sig_start))
        original_stop_index = int(np.floor(new_sig_end))
        x = signal_new[original_start_index:original_stop_index]

        ind = batch_sample[2]
        # print(ind)
        x_train.append(x[ind])   
        y_train.append(y)
       
      # Make sure they're numpy arrays (as opposed to lists)
      x_train = np.array(x_train)
      #X_train = np.rollaxis(X_train,1,4)
      y_train = np.array(y_train)
      # The generator-y part: yield the next training batch            
      yield x_train, y_train
 
def data_generator(data,batch_size=256,temporal_padding='same',shuffle=True):         
      
  """
  Yields the next training batch.
  Suppose `samples` is an array [[image1_filename,label1], [image2_filename,label2],...].
  """
  num_samples = len(data)
  if shuffle:
      data = shuffle_data(data)
  while True:   

    for offset in range(0, (num_samples//batch_size)*batch_size, batch_size):
      # print ('startring index: ', offset) 
      # Get the samples you'll use in this batch
      batch_samples = data[offset:offset+batch_size]
      # Initialise X_train and y_train arrays for this batch
      x_train = []
      y_train = []
      # For each example
      for batch_sample in batch_samples:

        # Load image (X)
        x = batch_sample[0]
        y = batch_sample[1]
        temp_data_list = []
        pkl = pickle.load(open(batch_sample[0][0] , 'rb'))

        x=pkl.data
      #print(x.shape)
        sig=pkl.data_preprocess
        fs = 250
        data_len = sig.shape[1]
        sig_segment = []
        for k in range(0, data_len, fs):
          sig_segment.append(sig[:,k:k+fs])
        sig_segment = np.array(sig_segment)
        # print(sig_segment.shape)
        seizure_index=[7,8,9,10,11,12,13,14,15,16,17]
        labels = pkl.tse_label_matrix
        x = sig_segment
        tse_split = [1 if ((x==seizure_index).any()) else 0 for x in labels]
        y_check = tse_split
      # print(sig_segment.shape)
  


        ###################### take 3 times before and after of the seizure ####################

        start = pkl.seizure_start
        stop = pkl.seizure_end
        desired_intv = 3

        signal_new = x

        seizure_duration = stop - start
        new_sig_start = start - desired_intv * seizure_duration
        new_sig_end = stop + desired_intv * seizure_duration
        if new_sig_start < 0:
            new_sig_start = 0
        if new_sig_end > len(y_check):
            new_sig_end = len(y_check)
        original_start_index = int(np.floor(new_sig_start))
        original_stop_index = int(np.floor(new_sig_end))
        x = signal_new[original_start_index:original_stop_index]

        ind = batch_sample[2]
        # print(ind)
        x_train.append(x[ind])   
        y_train.append(y)
       
      # Make sure they're numpy arrays (as opposed to lists)
      x_train = np.array(x_train)
      #X_train = np.rollaxis(X_train,1,4)
      y_train = np.array(y_train)
      # The generator-y part: yield the next training batch            
      yield x_train, y_train
    
## The code for training TCN
def TCN_Model(len_seq, one_sec_samp, num_channel, num_filters, LR):

  seq_len = len_seq

  input_size = one_sec_samp

  num_chan = num_channel

  inps = keras.layers.Input(shape=(seq_len, num_chan, input_size), name="inp")

  n = seq_len*2
  a = [i for i in range(1, n+1) if (math.log(i)/math.log(2)).is_integer()]
  dilation_list = tuple(a)

  tcn_out = TCN(nb_filters=num_filters, kernel_size=3,
                        nb_stacks=1, dilations=dilation_list,
                        padding='same', use_skip_connections=True,
                        dropout_rate=0.2, return_sequences=True,
                        activation='wavenet')(inps)

  #latent_large = Flatten()(tcn_out)
  #tcn_out = keras.layers.Lambda(lambda x: x[:, :, 0, :])(tcn_out)
  shape = tcn_out.get_shape().as_list()
  print(shape)
  tcn_out = tf.reshape(tcn_out, [-1, shape[1] , shape[2] * shape[3]])
  latent_small = TimeDistributed(Dense(128,activation='relu'))(tcn_out)
  probs = TimeDistributed(Dense(1,activation='sigmoid'))(latent_small)
  preds = tf.cast(probs > 0.5, tf.int16)

  model = keras.models.Model(inputs=inps, outputs=probs)
  model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(learning_rate=LR), metrics=['accuracy'])
  #print(model)
  return model
def shuffle_data(samples):
    data = shuffle(samples,random_state=2)
    return data
#################### Train the model #############################
new_dict = np.load('/home/baharsalafian/TUH_statistics/All_info.npy', allow_pickle='TRUE')
#focal_No=130
#gen_No=70

#focal_No=60
#gen_No=40

#focal_No=30
#gen_No=20

focal_No = 15
gen_No = 5

train,test=train_test_split(new_dict,focal_No,gen_No)




dirname='/home/baharsalafian/TUH_Bahareh_experiment/v1.5.2/raw_seizures'
SaveHisResults='/home/baharsalafian/TUH_experiments_TCN_history'
ModelResults='/home/baharsalafian/TUH_experiments_TCN_models'


modelname = 'TCN_10_train_5_test'
initLR = 0.001
num_epochs = 3
batch_size = 256

len_seq = 8
one_sec_samp = 250
num_channel = 20
num_filters = 16
LR = 0.001
tcn = 1
cnn = 0
two_dcnn = 0
gru = 0
len_seq_gru = 3


# print(model_tcn)

seizure_type_data = collections.namedtuple('seizure_type_data',
                                           ['patient_id', 'seizure_type', 'seizure_start', 'seizure_end', 'data',
                                           'new_sig_start', 'new_sig_end', 'original_sample_frequency','TSE_channels',
                                           'label_matrix', 'tse_label_matrix','lbl_channels','data_preprocess',
                                           'TSE_channels_preprocess','lable_matrix_preprocess','lbl_channels_preprocess',
                                           'data_segment','tse_label_segment','tse_timepoints'])



dir_csv = '/home/baharsalafian'
if not os.path.exists(os.path.join(dir_csv,'data_files')):
    os.mkdir(os.path.join(dir_csv,'data_files'))
if not os.path.exists(os.path.join(dir_csv,'data_files/train')):
    os.mkdir(os.path.join(dir_csv,'data_files/train')) 
if not os.path.exists(os.path.join(dir_csv,'data_files/test')):
    os.mkdir(os.path.join(dir_csv,'data_files/test')) 


# create_csv_files(dirname,dir_csv,test,'test',num_channel,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru)
# create_csv_files(dirname,dir_csv,train,'train',num_channel,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru)

# train_data = load_samples(dir_csv,data_cat='train',temporal_stride=1,temporal_length=len_seq)
# test_data = load_samples(dir_csv,data_cat='test',temporal_stride=1,temporal_length=len_seq)

# print(len(train_data))
# print(len(test_data))

train_generator = data_generator_modified(dir_csv,data_cat='train',temporal_stride=1,temporal_length=8,num_csv=10,
batch_size=256,temporal_padding='same',shuffle=True)


test_generator = data_generator_modified(dir_csv,data_cat='test',temporal_stride=1,temporal_length=8,num_csv=10,
batch_size=256,temporal_padding='same',shuffle=True)
# train_generator = data_generator(test_data,batch_size=batch_size,shuffle=True)

# test_generator = data_generator(test_data,batch_size=batch_size,shuffle=True)
start_time = time.time()

model = TCN_Model(len_seq, one_sec_samp, num_channel, num_filters, LR)
model.fit(train_generator,epochs=num_epochs,steps_per_epoch=50,
                     validation_data=test_generator,validation_steps=10,
                     use_multiprocessing=True, workers=32)

print("--- %s seconds ---" % (time.time() - start_time))
# -*- coding: utf-8 -*-
"""Copy of TCN_Example_Bahareh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcSy2-BXUmAPwJeWSyDy84Wq6-ZWfR-5
"""

from cProfile import label
from distutils.command.bdist import show_formats
import multiprocessing
import os
import sys
from tabnanny import check
from matplotlib import test
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="1"
import tensorflow as tf
import scipy
import h5py
import glob, os
from scipy.io import loadmat,savemat
import math
from keras.models import Model
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
import collections
# from parse_label import parse_event_labels
# %matplotlib inline
# from keras.datasets import mnist
from sklearn.metrics import plot_precision_recall_curve,roc_curve,roc_auc_score,auc
from sklearn.metrics import precision_recall_fscore_support,precision_recall_curve
import itertools
from tensorflow import keras
from tensorflow.keras.regularizers import l2, l1_l2
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,TimeDistributed, GRU,Concatenate
from tensorflow.keras.optimizers import Adam
from keras.layers import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, GlobalAveragePooling1D,MaxPooling1D,AveragePooling1D
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import f1_score,plot_roc_curve,accuracy_score
from sklearn import preprocessing
from keras import regularizers
from numpy import mean
from numpy import std
from tqdm.auto import tqdm
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
# from keras.optimizers import Adam
# from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, MaxPooling1D, ZeroPadding1D, GlobalAveragePooling1D,Bidirectional
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import LearningRateScheduler
from sklearn import preprocessing
from sklearn.metrics import roc_auc_score
# from keras import regularizers
# from regularizers import l1_l2
from numpy import mean
from numpy import std
import pickle
import re
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
import time
import gc
from keras import backend as K
from keras.preprocessing.image import ImageDataGenerator
import math
import wandb
from wandb.keras import WandbCallback
from collections import deque
from scipy.io import loadmat
import copy

# datagen = ImageDataGenerator(zca_whitening=True)
# from google.colab import drive
# drive.mount('/content/drive')

from keras_tcn import TCN
from SBRNN_Keras import ModelConfig, SBRNN_Detector, ModelConfigTCN
from data_gen_chb import SeizureDataGenerator


def PatientsName():

  Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
  'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
  'chb22','chb23','chb24']
  return Name

def segment_data(loaddir):


  info_mat = loadmat(loaddir)

  # data = info_mat['data']
  DenoisedSig = info_mat['DenoisedSig']
  # DenoisedSigSeizure = info_mat['DenoisedSigSeizure']

  #print("shape of data is ", data.shape)
  # print("shape of DenoisedSig is ", DenoisedSig.shape)


  SigEnd = info_mat['Sig_end'][0][0]
  SigStart = info_mat['Sig_start'][0][0]
  SiezureStart = info_mat['Siezure_start'][0][0]
  SiezureEnd = info_mat['Siezure_end'][0][0]
  n_channels = 18
  Fs = 256

  data_denoised = DenoisedSig[:,0:DenoisedSig.shape[1]-1]

  # n = data_denoised.shape[1]//Fs

  output=[data_denoised[:,i:i + Fs] for i in range(0,data_denoised.shape[1], Fs)]

  X = np.array(output)
  print("out shape", X.shape)

  Ylabel=np.zeros((SigEnd-SigStart,1))
  Seizure_durarion = SiezureEnd - SiezureStart + 1

  Seizure_start_label = SiezureStart - SigStart
  #print(Seizure_start_label)
  Ylabel[Seizure_start_label:Seizure_start_label+Seizure_durarion,0] =  1

  return X, Ylabel

def PatientsEDFFile(dirname):

  os.chdir(dirname)
  a=[]
  X=[]
  Y=[]
  b=[]
  c = []
  k=0
  for file in glob.glob("*.pkl"):

    split_file=file.split('.')
    # print(split_file[0])
    split_file2=split_file[0].split('_')
    b.append(split_file2[2]+'_'+split_file2[3]+'_'+split_file2[4]+'_'+split_file2[5])
    a.append(file)
    c.append(split_file[0])

      # print(a)
  # print("this is len of the whole pickle files", len(a))
  return a,b,c



def recall2(y_true, y_pred):

  true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
  possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
  recall_m = true_positives / (possible_positives + K.epsilon())
  return recall_m

def precision(y_true, y_pred):

  true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
  predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
  precision_m = true_positives / (predicted_positives + K.epsilon())
  return precision_m

def AUCPR(y_true, y_pred):

  precision, recall, _ = precision_recall_curve(y_true, y_pred)

  PR1=auc(recall, precision)

  return PR1
# def f1_score(y_true, y_pred):
  # precision_m = precision(y_true, y_pred)
  # recall_m = recall(y_true, y_pred)
  # return 2*((precision_m*recall_m)/(precision_m+recall_m+K.epsilon()))
def f1_score(y_true, y_pred,threshold_shift=0):

  y_pred = K.clip(y_pred, 0, 1)
  # shifting the prediction threshold from .5 if needed
  y_pred_bin = K.round(y_pred + threshold_shift)
  tp = K.sum(K.round(y_true * y_pred_bin)) + K.epsilon()
  fp = K.sum(K.round(K.clip(y_pred_bin - y_true, 0, 1)))
  fn = K.sum(K.round(K.clip(y_true - y_pred, 0, 1)))
  precision1 = tp / (tp + fp)
  recall1 = tp / (tp + fn)
  p = precision1
  r = recall1
  return 2 * ((p * r) / (p + r))

def auc_roc(y_true, y_pred):

  return tf.py_function(roc_auc_score, (y_true, y_pred), tf.double)

def auc_pr(y_true, y_pred):

  return tf.py_function(AUCPR, (y_true, y_pred), tf.double)

def  Conv_BN_Act_Pool_gru(filtNo,filtsize,stride,input1,activation,PoolSize,l2_size,drop_size):

  BN1 = BatchNormalization(axis=-1)(input1)
  conv1 = Conv1D(filtNo,filtsize,strides=stride,kernel_regularizer=l2(l2_size))(BN1)
  ActFunc=Activation(activation)(conv1)
  BN2 = BatchNormalization(axis=-1)(ActFunc)
  # pool1=MaxPooling1D(pool_size=PoolSize)(BN2)
  # out=Dropout(drop_size)(pool1)

  return BN2


def define_model_CNNGRU(drop_size,initLR):

  memory=3
  vectorsize=18
  input_shape=(1000,20)
  input_shape_GRU=(memory,1000,20)
  
  denseSize=8
  activation='relu'
  filtNo = 1024
  filtsize = 41
  stride = 5
  PoolSize=2
  l2_size=None
  gru_size = 256

  input1 = Input(input_shape)
  inputGRU = Input(input_shape_GRU)
  model1 = Conv_BN_Act_Pool_gru(filtNo,filtsize,stride,input1,activation,PoolSize,l2_size,drop_size)
  drop1 = Dropout(0.25)(model1)
  flat = Flatten()(drop1)
  cnn = Model(inputs=input1,outputs=flat)
  encoded_frames1 = TimeDistributed(cnn)(inputGRU)

  encoded_sequence1 = Bidirectional(GRU(gru_size, return_sequences=True))(encoded_frames1)
  encoded_sequence2 = Bidirectional(GRU(gru_size, return_sequences=True))(encoded_sequence1)
  encoded_sequence3 = Bidirectional(GRU(gru_size, return_sequences=True))(encoded_sequence2)

  drop2 = Dropout(0.5)(encoded_sequence3)
  output = TimeDistributed(Dense(1,activation='sigmoid'))(drop2)

  model = Model(inputs=inputGRU, outputs=output)
  model.compile(optimizer=Adam(learning_rate=initLR),loss='binary_crossentropy', metrics=["accuracy",f1_score,precision,recall2])
  return model


def  Conv_BN_Act_Pool(filtNo,filtsize1,filtsize2,input1,activation,PoolSize,l2_size,drop_size):


  conv1 = Conv1D(filtNo,filtsize1,kernel_regularizer=l2(l2_size))(input1)
  conv2 = Conv1D(filtNo, filtsize2,kernel_regularizer=l2(l2_size))(conv1)
  BN=BatchNormalization(axis=-1)(conv2)
  ActFunc=Activation(activation)(BN)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc)
  # out=Dropout(drop_size)(pool1)

  return pool1

def define_CNN(drop_size,initLR):
  l2_size=None
  input_shape=(1000,20)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)

  denseout = Dense(100)(flat)
  denseout2 = Dense(50)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)
  # define a model with a list of two inputs
  model = Model(inputs=input1, outputs=output)
  model.compile(optimizer=Adam(learning_rate=initLR),loss='binary_crossentropy',metrics=["accuracy",f1_score,precision,recall2])

  return model

def MeanStdVar(mylist):


  ListMean=np.mean(mylist,axis=0)
  ListStd=np.std(mylist)
  ListVar=np.var(mylist)

  return ListMean,ListStd,ListVar


def lr_exp_decay(epoch, lr):
  # k = math.sqrt(2)
  k=2
  if lr>0.00001:
    return lr / k
  else:
    return lr

def create_sub_seq(nn_input, len_ss, labels=None):
    """
    This function creates all sub sequences for the batch
    """
    # print(nn_input.shape)
    n_seq = nn_input.shape[0]

    len_seq = nn_input.shape[1]

    # print(n_seq)
    # print(len_seq)

    n_ss = len_seq - len_ss + 1
    new_labels = []
    if nn_input.ndim == 3:
      new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2]))
    elif nn_input.ndim == 4:

      new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2], nn_input.shape[3]))

    # print(new_inp.shape)
    if labels is not None:
        dim_labels = labels.shape
        if len(dim_labels) == 2:
            new_labels = np.zeros((n_ss*n_seq, len_ss))

            # print(new_labels.shape)
        elif len(dim_labels) == 3:
            new_labels = np.zeros((n_ss * n_seq, len_ss, dim_labels[2]))
    k = 0
    for i in range(n_seq):
        for j in range(n_ss):
            new_inp[k, :, :] = nn_input[i, j:j + len_ss, :]
            if labels is not None:
                if len(dim_labels) == 2:
                    new_labels[k, :] = labels[i, j:j + len_ss]
                elif len(dim_labels) == 3:
                    new_labels[k, :, :] = labels[i, j:j + len_ss, :]
            k += 1

    return new_inp, n_ss, new_labels

def creat_sub_seq_models(x,y,n_chan,one_sec_samp,tcn,cnn,two_dcnn,gru,len_seq,len_seq_gru):

  if tcn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))

    print("tcn x and y", x_new.shape, y.shape)
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]

  if cnn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1]*one_sec_samp,n_chan))
    y_new = y_new[:,last_element-1]
    y_new = np.expand_dims(y_new, axis=1)

  if gru == 1:
    # x_new = np.reshape(x, (1, x.shape[0], -1))
    # x_new, _,y_new = create_sub_seq(x_new, len_seq, y)

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1]*one_sec_samp,n_chan))

    print("this is last element and x shape", last_element, x_new.shape, y_new.shape)
    y_new = y_new[:,last_element-1]

    y_new = np.expand_dims(y_new, axis=0)
    print(y_new.shape)

    x_new = np.reshape(x_new, (1,x_new.shape[0], x_new.shape[1],n_chan))
    # y_new = y_new[:,last_element-1]
    # y_new = np.expand_dims(y_new, axis=0)
    x_new, _,y_new = create_sub_seq(x_new, len_seq_gru, y_new)
    print("last y shape", y_new.shape)

  if two_dcnn == 1:

    x_new = np.reshape(x, (1, x.shape[0], -1))
    x_new, _,y_new = create_sub_seq(x_new, len_seq, y)
    x_new = np.reshape(x_new, (x_new.shape[0], x_new.shape[1], n_chan, one_sec_samp))
    last_element = y_new.shape[1]
    x_new = np.reshape(x_new, (x_new.shape[0], n_chan, x_new.shape[1]*one_sec_samp))
    y_new = y_new[:,last_element-1]
    y_new = np.expand_dims(y_new, axis=1)

  return x_new, y_new

def find_indices(pid,name):

  index=[]
  for j in range(len(name)):
      index.append([i for i, e in enumerate(pid) if e == name[j]])

  return index

def create_one_sec_sig(pkl, fs):

  sig=pkl.data_preprocess

  # print("this is main signal shape", sig.shape)

  data_len = sig.shape[1]
  sig_segment = []
  for k in range(0, data_len, fs):
    sig_segment.append(sig[:,k:k+fs])
  sig_segment = np.array(sig_segment)

  print("this is sig_seg_one_sec shape",sig_segment.shape)

  seizure_index=[7,8,9,10,11,12,13,14,15,16,17]
  labels = pkl.tse_label_matrix
  tse_split = [1 if ((x==seizure_index).any()) else 0 for x in labels]
  # sig = loadmat(files[i])
  x = sig_segment
  y = tse_split

  return x, y

def make_balance_data(x,y,pkl,desired_intv):
  
  start = pkl.seizure_start
  stop = pkl.seizure_end

  # print("this is seizure start and end", start, stop)
  

  signal_new = x

  seizure_duration = stop - start
  new_sig_start = start - desired_intv * seizure_duration
  new_sig_end = stop + desired_intv * seizure_duration
  if new_sig_start < 0:
      new_sig_start = 0
  if new_sig_end > len(y):
      new_sig_end = len(y)
  original_start_index = int(np.floor(new_sig_start))
  original_stop_index = int(np.floor(new_sig_end))
  x = signal_new[original_start_index:original_stop_index]
  tse_split = y[original_start_index:original_stop_index] 
  y = tse_split
  ####################
  # print(x.shape)
  #print(y.shape)
  x = np.array(x)
  y = np.array(y)
  y = np.expand_dims(y, axis=0)

  return x, y

def create_csv_files(dirname,all_img_dir,category_name,files,desired_intv,n_chan,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru):


    # name_csv[index_v2]
    # print("this is len of desire file",len(index_v2))
    
    names = []
    size = []

    data=[]
    label=[]
    c = 0
    df = pd.DataFrame(columns=['FileName', 'Label'])
    for i in range(len(files)):

      path=os.path.join(dirname,files[i]+'.pkl')
      names.append(path)
      # print("name of the file",name_csv[index_v2[i]])
      # print("name of the path ",main[index_v2[i]])
      pkl = pickle.load(open(path , 'rb'))

      x=pkl.data
      fs = one_sec_samp 
      x,y = create_one_sec_sig(pkl, fs)

      ###################### take 3 times before and after of the seizure ####################
      x,y = make_balance_data(x,y,pkl,desired_intv)
      # print("this is 10 times shape of x", x.shape)
      # print(y.shape)
      
      x_new, y_new = creat_sub_seq_models(x,y,n_chan,one_sec_samp,tcn,cnn,two_dcnn,gru,len_seq,len_seq_gru)
      print("this is x new shape", y_new.shape)
      # print("this is y new shape", y_new.shape)
      c = c + x_new.shape[0]
      for j in range(x_new.shape[0]):
        # savemat(os.path.join(all_img_dir,files[i]+'_'+str(j)+'.mat'), {"data":x_new[j,:,:]})
        # print(y_new[j,:])
        if (gru == 1 | tcn == 1) : 
          y_save = y_new[j,:]
        else:
          y_save = y_new[j,:][0]
        print("this is test", y_save.shape)
        df = df.append({'FileName':files[i]+'_'+str(j), 'Label': y_save},ignore_index=True)
    # df.to_pickle(os.path.join(os.path.join(dir_csv,f'data_files_tuh_selected/{category_name}'), f'{category_name}.pkl'))
    print("this is whole length", c)


def create_csv_files_gru(dirname,all_img_dir,category_name,files,desired_intv,n_chan,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru):


  # name_csv[index_v2]
  # print("this is len of desire file",len(index_v2))
  
  names = []
  size = []

  data=[]
  label=[]
  c = 0
  df = pd.DataFrame(columns=['FileName', 'Label'])
  for i in range(len(files)):

    path=os.path.join(dirname,files[i]+'.pkl')
    names.append(path)
    # print("name of the file",name_csv[index_v2[i]])
    # print("name of the path ",main[index_v2[i]])
    pkl = pickle.load(open(path , 'rb'))

    x=pkl.data
    fs = one_sec_samp 
    x,y = create_one_sec_sig(pkl, fs)

    ###################### take 3 times before and after of the seizure ####################
    x,y = make_balance_data(x,y,pkl,desired_intv)
    # print("this is 10 times shape of x", x.shape)
    # print(y.shape)
    
    x_new, y_new = creat_sub_seq_models(x,y,n_chan,one_sec_samp,tcn,cnn,two_dcnn,gru,len_seq,len_seq_gru)

    print("shape of x_new", x_new.shape)
    print("shape of y_new", y_new.shape)
    data.append(x_new)
    label.append(y_new)

  
  return data, label
  #   # print("this is x new shape", y_new.shape)
  #   # print("this is y new shape", y_new.shape)
  #   c = c + x_new.shape[0]
  #   for j in range(x_new.shape[0]):
  #     savemat(os.path.join(all_img_dir,files[i]+'_'+str(j)+'.mat'), {"data":x_new[j]})
  #     print("x_new", x_new[j].shape)
  #     if gru == 1:
  #       y_save = y_new[j,:]
  #       # y_save = list(y_save)

  #     elif tcn == 1 : 
  #       y_save = y_new[j,:]
  #       # y_save = list(y_save)
  #     else:
  #       y_save = y_new[j,:][0]

  #     # print("this is test", y_save.shape)
  #     df = df.append({'FileName':files[i]+'_'+str(j), 'Label': y_save},ignore_index=True)
  # df.to_pickle(os.path.join(os.path.join(dir_csv,f'data_files_tuh_selected_gru/{category_name}'), f'{category_name}.pkl'))
  # print("this is whole length", c)

 

    # return x_new, y_new
    #   df = pd.DataFrame(columns=['FileName', 'Label', 'index'])
    #   for j in range(x.shape[0]):
    #     # print(type(y[:,j][0]))
    #     df = df.append({'FileName':path , 'Label': y[:,j][0],'index': np.int64(j)},ignore_index=True)
    #   df.to_csv(os.path.join(os.path.join(dir_csv,f'data_files/{category_name}'), f'{name_csv[index_v2[i]]}.csv'))
    # print(len(names))


# def ReadMatFiles(dirname,all_img_dir,dir_csv,ind,category_name):

#   EDF = []
#   EDFFiles = []
#   Name = []
#   EDF,names = PatientsEDFFile(dirname)
#   Name = PatientsName()
#   Xfile=[]
#   Yfile=[]
#   c = 0


#   X=[]
#   Y=[]

#   # print(ind)
#   df = pd.DataFrame(columns=['FileName', 'Label', 'index'])
#   for k in range(len(ind)):


#     csv_name = EDF[ind[k]].split('.')

#     matfile = loadmat(os.path.join(dirname,EDF[ind[k]]))

#     x = matfile['X_4sec']
#     y = matfile['Y_label_4sec']
#     # print(x[0,:,:].shape)
#     y=np.transpose(y)

#     start_idx = np.argmax(y>0)
#     a = y == 1
#     end_idx = len(a) - np.argmax(np.flip(a)) - 1
#     real_y = np.zeros_like(y)
#     real_y[start_idx:end_idx+1] = 1


#     # x, y = segment_data(os.path.join(dirname,EDF[ind[k]]))

#     print("shape of x",x.shape)
#     print("shape of y", real_y.shape)
#     # path = os.path.join(dirname,EDF[ind[k]])


#     for j in range(x.shape[0]):
#       savemat(os.path.join(all_img_dir,csv_name[0]+'_'+str(j)+'.mat'), {"data":x[j,:,:]})
#       df = df.append({'FileName':csv_name[0]+'_'+str(j), 'Label': real_y[j,:][0]},ignore_index=True)
#   df.to_pickle(os.path.join(os.path.join(dir_csv,f'data_files_chb_old/{category_name}'), f'{category_name}.pkl'))
#     # c = c + len(df) - 7

#   print("this is the whole length", c)


    # X.append(x)
    # Y.append(y)
    #matfile=loadmat(os.path.join(dirname,EDF[ind[k]]))


  # X = np.concatenate(X,axis=0)
  # Y = np.concatenate(Y,axis=0)
  # Y = Y.T
  # print(X.shape)
  # print(Y.shape)
  # return X, Y

def train_test_split(new_dict,focal_No,gen_No):

    train=[]
    test=[]

    focal_list=new_dict.item()['header_focal']

    generalized_list=new_dict.item()['header_generalized']


    test=[*focal_list[-10:],*generalized_list[-10:]]


    train=[*focal_list[0:focal_No],*generalized_list[0:gen_No]]
    #train=[*focal_list[-5:],*generalized_list[-5:]]

    return train,test


def shuffle_data(samples):

  data = shuffle(samples)
  return data

class My_Custom_Generator(keras.utils.Sequence) :
  
  def __init__(self, image_filenames, labels, batch_size,shuffle) :
    self.image_filenames = image_filenames
    self.labels = labels
    self.batch_size = batch_size
    self.shuffle = shuffle
    self.on_epoch_end()
    
  def on_epoch_end(self):
    # self.indexes = self.list_IDs
    if self.shuffle == True:
      self.image_filenames, self.labels = shuffle(self.image_filenames, self.labels)

  def __len__(self) :
    return (np.ceil(len(self.image_filenames) / float(self.batch_size))).astype(int)
  
  
  def __getitem__(self, idx) :
    batch_x = self.image_filenames[idx * self.batch_size : (idx+1) * self.batch_size]
    batch_y = self.labels[idx * self.batch_size : (idx+1) * self.batch_size].values.tolist()
    # print("this is type of y",type(batch_y))
    # # print("this is dtype of y",dtype(batch_y))
    # print("this is batch y",batch_y)
    x = np.array([loadmat('/home/baharsalafian/tuh_all_images_selected_gru/' + str(file_name)+'.mat')['data'] for file_name in batch_x])
    # print("this is during data generator",idx)
    y = np.array(batch_y)
    # print("this is type of y",type(y))
    # print("this is dtype of y",dtype(batch_y))
    # print("this is batch y",y)
    y = np.expand_dims(y, axis=1)

    x = np.array(x, dtype=np.float32)
    y = np.array(y, dtype=np.float32)
    

    return x, y


############## train_generator oversample

class My_Custom_Generator_train(keras.utils.Sequence) :
  
  def __init__(self, image_filenames, labels, batch_size,shuffle) :
    self.image_filenames = image_filenames
    self.labels = labels
    self.batch_size = batch_size
    self.shuffle = shuffle
    self.on_epoch_end()

    self.ind_one = [i for i,x in enumerate(self.labels) if x== 1]
    self.ind_zero = [i for i,x in enumerate(self.labels) if x== 0]

    self. x_one = self.image_filenames[self.ind_one]
    self.x_zero = self.image_filenames[self.ind_zero]

    self.y_one = self.labels[self.ind_one]
    self.y_zero = self.labels[self.ind_zero]
    
  def on_epoch_end(self):
    # self.indexes = self.list_IDs
    if self.shuffle == True:
      self.image_filenames, self.labels = shuffle(self.image_filenames, self.labels)

  def __len__(self) :
    return (np.ceil(len(self.x_zero) / float(self.batch_size//2))).astype(int)
  
  
  def __getitem__(self, idx) :

    selected_idx_one = np.random.choice(len(self.x_one),self.batch_size//2)

    batch_x_zero = self.x_zero[idx * self.batch_size//2 : (idx+1) * self.batch_size//2]
    batch_x_one = self.x_one.loc[self.x_one.index[selected_idx_one]]
  


    batch_y_one = self.y_one.loc[self.y_one.index[selected_idx_one]]
    batch_y_zero = self.y_zero[idx * self.batch_size//2 : (idx+1) * self.batch_size//2]
  
    x_one_total = np.array([loadmat('/home/baharsalafian/tuh_all_images_selected/' + str(file_name)+'.mat')['data'] for file_name in batch_x_one])
    x_zero_total = np.array([loadmat('/home/baharsalafian/tuh_all_images_selected/' + str(file_name)+'.mat')['data'] for file_name in batch_x_zero])
    # print("this is for one total",x_one_total.shape)
    # print("this is for zero total",x_zero_total.shape)
    x_total = np.concatenate((x_zero_total,x_one_total),axis=0)
    
    # print("this is during data generator",idx)
    y_one_total = np.array(batch_y_one)
    y_zero_total = np.array(batch_y_zero)

    y_one_total = np.expand_dims(y_one_total, axis=1)
    y_zero_total = np.expand_dims(y_zero_total, axis=1)
    y_total = np.concatenate((y_zero_total,y_one_total),axis=0)

    return x_total, y_total

class My_Custom_Generator_train_gru(keras.utils.Sequence) :
  
  def __init__(self, image_filenames, labels, batch_size,shuffle) :
    self.image_filenames = image_filenames
    self.labels = labels
    self.batch_size = batch_size
    self.shuffle = shuffle
    self.on_epoch_end()

    self.ind_one = [i for i,x in enumerate(self.labels) if (x==1).all()]
    self.ind_zero = [i for i,x in enumerate(self.labels) if (x==0).all()]

    self. x_one = self.image_filenames[self.ind_one]
    self.x_zero = self.image_filenames[self.ind_zero]

    self.y_one = self.labels[self.ind_one]
    
    self.y_zero = self.labels[self.ind_zero]
    
  def on_epoch_end(self):
    # self.indexes = self.list_IDs
    if self.shuffle == True:
      self.image_filenames, self.labels = shuffle(self.image_filenames, self.labels)

  def __len__(self) :
    return (np.ceil(len(self.x_zero) / float(self.batch_size//2))).astype(int)
  
  
  def __getitem__(self, idx) :
    # print("ones labels", self.y_zero.loc[:].values[0].shape)
    selected_idx_one = np.random.choice(len(self.x_one),self.batch_size//2)

    batch_x_zero = self.x_zero[idx * self.batch_size//2 : (idx+1) * self.batch_size//2]
    batch_x_one = self.x_one.loc[self.x_one.index[selected_idx_one]]

    # print("33333333333333333333333333333")
    # print(type(batch_x_zero))
    # print(type(batch_x_one))
    # print(batch_x_zero.shape)
    # print(batch_x_one.shape)

    batch_y_one = self.y_one.loc[self.y_one.index[selected_idx_one]].values.tolist()
    batch_y_zero = self.y_zero[idx * self.batch_size//2 : (idx+1) * self.batch_size//2].values.tolist()

    # print("33333333333333333333333333333")
    # print(type(batch_y_zero))
    # print(type(batch_y_one))
    # print(len(batch_y_zero))
    # print(batch_y_one[0].shape)
    # print(np.array(batch_y_zero).shape)

    # print("batch zero", batch_y_zero.shape)

    y_total = np.concatenate((batch_y_one,batch_y_zero),axis=0)
    y_total = np.expand_dims(y_total, axis=2)

    # print(y_total.shape)
  
    x_one_total = np.array([loadmat('/home/baharsalafian/tuh_all_images_selected_gru/' + str(file_name)+'.mat')['data'] for file_name in batch_x_one])
    x_zero_total = np.array([loadmat('/home/baharsalafian/tuh_all_images_selected_gru/' + str(file_name)+'.mat')['data'] for file_name in batch_x_zero])

    x_total = np.concatenate((x_zero_total,x_one_total),axis=0)
    # print("x total type", type(x_total))
    # print("y total type", type(y_total))
    # print("x_one_total",x_one_total.shape)
    # print("x_zero_total",x_zero_total.shape)
    # x_total = np.array([np.array(val) for val in x_total])

    x_total = np.array(x_total, dtype=np.float32)
    y_total = np.array(y_total, dtype=np.float32)

    # print("x_total",x_total.shape)
    # print("y_total",y_total.shape)
    # x_total = np.asanyarray(x_total).astype('float32')
    # y_total = np.asarray(y_total).astype('float32')
    
    # print("this is during data generator",idx)
    # y_one_total = np.array(batch_y_one)
    # y_zero_total = np.array(batch_y_zero)



    # y_one_total = np.expand_dims(y_one_total, axis=1)
    # y_zero_total = np.expand_dims(y_zero_total, axis=1)
    # y_total = np.concatenate((y_zero_total,y_one_total),axis=0)

    # print("x, y total shape", x_total.shape, y_total.shape)

    return x_total, y_total


def define_model_CNNGRU_old(drop_size,initLR):

  memory=3
  vectorsize=18
  input_shape=(1000,20)
  input_shape_GRU=(memory,1000,20)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  l2_size=None

  input1 = Input(input_shape)
  inputGRU=Input(input_shape_GRU)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)
  cnn=Model(inputs=input1,outputs=flat)
  encoded_frames = TimeDistributed(cnn)(inputGRU)
  encoded_sequence = Bidirectional(GRU(50, return_sequences=True))(encoded_frames)
  drop2=Dropout(0.5)(encoded_sequence)
  output=TimeDistributed(Dense(1,activation='sigmoid'))(drop2)

  model = Model(inputs=inputGRU, outputs=output)
  model.compile(optimizer=Adam(learning_rate=initLR),loss='binary_crossentropy', metrics=["accuracy",f1_score,precision,recall2])
  return model


#################### Train the model #############################


# modelname = 'CNN_tuh_selected_new_loader_test2'

indx=range(0,24)

# print(model_tcn)

dir_csv = '/home/baharsalafian'

if not os.path.exists(os.path.join(dir_csv,'data_files_tuh_selected_tcn')):
    os.mkdir(os.path.join(dir_csv,'data_files_tuh_selected_tcn'))

if not os.path.exists(os.path.join(dir_csv,'data_files_tuh_selected_tcn/train')):
    os.mkdir(os.path.join(dir_csv,'data_files_tuh_selected_tcn/train'))

if not os.path.exists(os.path.join(dir_csv,'data_files_tuh_selected_tcn/test')):
    os.mkdir(os.path.join(dir_csv,'data_files_tuh_selected_tcn/test'))

if not os.path.exists(os.path.join(dir_csv,'data_files_tuh_selected_tcn/valid')):
    os.mkdir(os.path.join(dir_csv,'data_files_tuh_selected_tcn/valid'))



dirname='/home/baharsalafian/TUH_Bahareh_experiment/v1.5.2/raw_seizures'

all_img_dir = '/home/baharsalafian/tuh_all_images_selected_tcn'

dir_select = '/home/baharsalafian/pid_00006514'

ModelResults = '/home/baharsalafian/TUH_Bahareh_experiment_dataloader_50patients_train'
new_dict = np.load('/home/baharsalafian/TUH_statistics/All_info.npy', allow_pickle='TRUE')

focal_No = 15
gen_No = 5

modelname = 'GRU_tuh_pid_00006514'
initLR = 0.01
num_epochs = 50
batch_size = 256

len_seq = 8
one_sec_samp = 250
num_channel = 20
num_filters = 16

tcn = 1
cnn = 0
two_dcnn = 0
gru = 0
len_seq_gru = 3
desired_intv = 10
l2_size=None
drop_size=0


model = define_model_CNNGRU(drop_size,initLR)
[print(i.shape, i.dtype) for i in model.inputs]
[print(o.shape, o.dtype) for o in model.outputs]
[print(l.name, l.input_shape, l.dtype) for l in model.layers]


df_test = pd.read_pickle(os.path.join(dir_select, 'test_pid_00006514.pkl'))




test_files = df_test.file.tolist()



seizure_type_data = collections.namedtuple('seizure_type_data',
                                           ['patient_id', 'seizure_type', 'seizure_start', 'seizure_end', 'data',
                                           'new_sig_start', 'new_sig_end', 'original_sample_frequency','TSE_channels',
                                           'label_matrix', 'tse_label_matrix','lbl_channels','data_preprocess',
                                           'TSE_channels_preprocess','lable_matrix_preprocess','lbl_channels_preprocess',
                                           'data_segment','tse_label_segment','tse_timepoints'])


x, y = create_csv_files_gru(dirname,all_img_dir,'test',test_files,desired_intv,num_channel,one_sec_samp,len_seq,len_seq_gru,tcn,cnn,two_dcnn,gru)
# train_label = df.iloc[:,1]
print("this is len of x",len(y))
print("this is shape of the x",y[0].shape)


def Plot_true_predict(modeldir,SaveResults,SaveResultsTruePred,modelname,th):
    
  ModelName = modelname + '.h5'
  # model = keras.models.load_model('model.h5', custom_objects={'HammingScore': HammingScore} )
  model = tf.keras.models.load_model(os.path.join(modeldir,ModelName),custom_objects={"f1_score":f1_score,"precision":precision,"recall2":recall2})
  [print(i.shape, i.dtype) for i in model.inputs]
  [print(o.shape, o.dtype) for o in model.outputs]
  [print(l.name, l.input_shape, l.dtype) for l in model.layers]
  savenamef1='fscore_' + modelname
  # cfname='cfmat_'+modelname+'_'+indx+'_'+str(Noepoch)+'_'
  fprname = 'fpr_' + modelname
  tprname = 'tpr_' + modelname
  prname = 'PR_' + modelname
  rocname = 'ROC_' + modelname
  precname = 'Precision_'+ modelname

  recname = 'Recall_' + modelname
  accname = 'Accuracy_' + modelname


  fpr=[]
  tpr=[]
  PR=[]
  ROC=[]
  pred=[]
  act=[]
  fscore=[]
  prec=[]
  rec=[]
  Acc=[]
  cnt = 0
  for i in range(len(x)):

    ypred=model.predict(x[i])
    ypred_th = (ypred > th).astype(int)
    Y = y[i]

    if gru==1:
      Y = Y[:, 2]
      ypred= ypred[:, 2]
      ypred_th= ypred_th[:, 2]

    if tcn==1:
      Y = Y[:, 0]
      ypred= ypred[:, 0]
      ypred_th= ypred_th[:, 0]

    # if th==0.5:
    fpr1, tpr1, _ = roc_curve(Y, ypred)
    PR1=AUCPR(Y, ypred)
    ROC1=roc_auc_score(Y,ypred)
    fpr.append(fpr1)
    tpr.append(tpr1)
    PR.append(PR1)
    ROC.append(ROC1)
    Acc.append(accuracy_score(Y,ypred_th))

    Precision1, Recall1, f1, _ = precision_recall_fscore_support(Y, ypred_th, average='binary')

    pred.append(list(ypred_th))
    act.append(list(Y))
    fscore.append(f1)
    prec.append(Precision1)
    rec.append(Recall1)

    cnt=cnt+1
    plt.subplot(8,1,cnt)

    plt.plot(range(len(Y)), Y)
    plt.plot(range(len(Y)),ypred_th)
      # accuracy.append(np.mean(np.array(Acc),axis=0))
  
  plt.suptitle(modelname+'_'+str(th)+'_true')

  plt.savefig(SaveResultsTruePred+'/'+modelname+'_'+str(th)+'.pdf', format='pdf', bbox_inches = 'tight')
    # plt.clf()


  PRmean,PRstd,_= MeanStdVar(PR)
  ROCmean,ROCstd,_ = MeanStdVar(ROC)
  Accmean,Accstd,_= MeanStdVar(Acc)
  precmean,precstd,_= MeanStdVar(prec)
  recmean,recstd,_= MeanStdVar(rec)
  fscoremean,fscorestd,_ = MeanStdVar(fscore)

  print("PR ", PRmean,PRstd)
  print("ROC ", ROCmean,ROCstd)
  print("ACC ", Accmean,Accstd)
  print("precision ", precmean,precstd)
  print("recall ", recmean,recstd)
  print("f1_score ", fscoremean,fscorestd)
  # print(threshold1)
  time.sleep(10)

  np.save(os.path.join(SaveResults, accname),  Acc)

  np.save(os.path.join(SaveResults, savenamef1+'_'+str(th)),  fscore)
  # np.save(os.path.join(SaveResults, cfname+'_'+str(th)),  cnf_matrix)
#
  np.save(os.path.join(SaveResults, prname), PR)
  np.save(os.path.join(SaveResults, rocname),  ROC)

  np.save(os.path.join(SaveResults, precname),prec)
  np.save(os.path.join(SaveResults, recname), rec)


SaveResultsTruePred  = '/home/baharsalafian/tuh_test_plots'

SaveResults = '/home/baharsalafian/tuh_test_results'

modeldir = '/home/baharsalafian/TUH_Bahareh_experiment_dataloader_50patients_train'

Plot_true_predict(modeldir,SaveResults,SaveResultsTruePred,modelname='TCN_tuh_pid_00006514_no_oversample_epoch_150_batchsize_256_LR_0.0001_num_filter_96',th=0.7)
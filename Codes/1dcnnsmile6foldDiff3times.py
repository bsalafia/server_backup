# -*- coding: utf-8 -*-
"""1DCNNServer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XIaeyIZmYN-0bMvxywlL5M5nTjaRBOJe
"""

import os
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="2"
from keras.models import Model
from keras.utils.generic_utils import get_custom_objects
from keras import optimizers, regularizers
import keras.backend as K
from keras import regularizers
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
import time
import tensorflow as tf
import os
import scipy
import h5py
import glob, os
# import BaseLineModel
from scipy.io import loadmat
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
# from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,Concatenate

from keras.optimizers import Adam
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, MaxPooling1D, ZeroPadding1D, GlobalAveragePooling1D
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn import preprocessing
from keras import regularizers
from numpy import mean
from numpy import std
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
# from google.colab import drive
from sklearn.model_selection import LeaveOneOut
import gc
gc.collect()
# drive.mount('/content/drive')

def PatientsName():
    Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
    'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
    'chb22','chb23','chb24']

    return Name

def PatientsEDFFile(dirname):

    os.chdir(dirname)
    a=[]
    X=[]
    Y=[]
    k=0
    for file in glob.glob("*.mat"):

        a.append(file)
        # print(a)

    return a
def Getinfo(Siezure_start,Siezure_end,Sig_start,Sig_end,ylabel,y,x,mi):

  start=Siezure_start[0][0]
  end=Siezure_end[0][0]
  duration=end-start
  sig_start_new=start-(duration*3+3)
  sig_end_new=end+(duration*3+3)
  #######
  if sig_start_new<Sig_start[0][0]:

    sig_start_new=Sig_start[0][0]

  if sig_end_new>Sig_end[0][0]:

    sig_end_new=Sig_end[0][0]
  ######
  matlen=sig_end_new-sig_start_new-32+1

  first_ind_old=np.nonzero(ylabel)[1][0]
  lenNoZero32=len(np.nonzero(ylabel)[1])
  lenNoZero4=len(np.nonzero(y)[1])
  first_ind_new=start-sig_start_new-32+2

  ylabel_new=np.zeros((1,matlen))
  y_new=np.zeros((1,matlen))
  x_new=np.zeros((matlen,x.shape[1],x.shape[2]))
  mi_new=np.zeros((matlen,mi.shape[1],mi.shape[2]))

  return lenNoZero4,lenNoZero32,first_ind_old,first_ind_new,ylabel_new,y_new,x_new,mi_new,matlen
#####################################
def Getmatrices(lenNoZero,matlen,first_ind_old,first_ind_new,x,y,x_new,y_new):

  lenNoZero4=lenNoZero

  if matlen<lenNoZero4:

    y_new=y[:,first_ind_old:first_ind_old+matlen]
    x_new=x[first_ind_old:first_ind_old+matlen,:,:]

  else:
    y_new[:,first_ind_new:first_ind_new+lenNoZero4]=y[:,first_ind_old:first_ind_old+lenNoZero4]
    x_new[first_ind_new:first_ind_new+lenNoZero4,:,:]=x[first_ind_old:first_ind_old+lenNoZero4,:,:]
    if first_ind_new > 0:


      y_new[:,0:first_ind_new]=y[:,first_ind_old-first_ind_new-1:first_ind_old]
      x_new[:,0:first_ind_new]=x[first_ind_old-first_ind_new-1:first_ind_old,:,:]

    if first_ind_new+lenNoZero4 < matlen:

      y_new[:,first_ind_new+lenNoZero4:matlen]=y[:,first_ind_old+lenNoZero4:first_ind_old+lenNoZero4+(-first_ind_new-lenNoZero4+matlen)]
      x_new[:,first_ind_new+lenNoZero4:matlen]=x[first_ind_old+lenNoZero4:first_ind_old+lenNoZero4+(-first_ind_new-lenNoZero4+matlen),:,:]


  return x_new,y_new

def ReadMatFilesDiff(dirname,indx):

  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]
  ind=[]

  MI2=[]
  X=[]
  Y=[]

  for j in list(indx):
    print(j)
    indices = [i for i, elem in enumerate(EDF) if Name[j] in elem]
    ind.append(indices)

  ind=np.concatenate(ind,axis=0)

  for k in range(len(ind)):
    # print(ind[k])
    matfile=loadmat(os.path.join(dirname,EDF[int(ind[k])]))
    x=matfile['X_4sec']
    y=matfile['Y_label_4sec']
    mi=matfile['estimated_MI']
    MI=np.zeros((mi.shape[0],171))
    for j in range(mi.shape[0]):

      mi2=mi[j,:,:]
      mi_mod=list(mi2[np.triu_indices(18)])
      MI[j,:]=mi_mod
    # MI=np.concatenate(MI,axis=0)
    # y=np.transpose(y)
    X.append(x)
    Y.append(y)
    MI2.append(list(MI))


  X=np.concatenate(X,axis=0)
  Y=np.concatenate(Y,axis=0)
  MI2=np.concatenate(MI2,axis=0)

  MI_diff=np.zeros((MI2.shape[0]-1,MI2.shape[1]))

  for j in range(MI2.shape[0]-1):
    MI_diff[j,:]=MI2[j+1,:]-MI2[j,:]




  return X[1:,:,:],Y[1:,:],MI2[1:,:],MI_diff

# def ReadMatFiles(dirname,indx):
#
#   EDF=[]
#   Name=[]
#   EDF=PatientsEDFFile(dirname)
#   Name=PatientsName()
#   Xfile=[]
#   Yfile=[]
#
#
#   indices = [i for i, elem in enumerate(EDF) if Name[indx] in elem]
#
#   return indices,EDF

def  Conv_BN_Act_Pool(filtNo,filtsize1,filtsize2,input1,activation,PoolSize):
    conv1 = Conv1D(filtNo,filtsize1)(input1)
    conv2 = Conv1D(filtNo, filtsize2)(conv1)
    BN=BatchNormalization(axis=-1)(conv2)
    ActFunc=Activation(activation)(BN)
    pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc)

    return pool1
    # model = Model(inputs = input1, outputs = pool1)

def define_model():
    vectorsize=18
    input_shape=(1024,18)
    denseSize=8
    activation='relu'

    filtsize1=22
    filtNo1=8
    filtsize2=10
    filtNo2=16

    PoolSize=2

    input1 = Input(input_shape)

    model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize)
    model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize)
    model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize)
    model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize)
    model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize)


    conv6=Conv1D(filtNo1,1)(model5)
    drop1=Dropout(0.25)(conv6)
    flat=Flatten()(drop1)

# Fully connected layer

    dense=Dense(denseSize)(flat)
##################################################################
    dim_data =int(vectorsize*(vectorsize+1)/2)
    vector_input = Input((dim_data,))

    # Concatenate the convolutional features and the vector input
    concat_layer= Concatenate()([flat,vector_input])
    denseout = Dense(100, activation='relu')(concat_layer)
    denseout = Dense(50, activation='relu')(denseout)
    output = Dense(1, activation='sigmoid')(denseout)

    # define a model with a list of two inputs
    model = Model(inputs=[input1, vector_input], outputs=output)


    model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy', metrics=['accuracy'])

    return model

model=define_model()
model.summary()

def PatientsName():
    Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
    'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
    'chb22','chb23','chb24']

    return Name

def PatientsEDFFile(dirname):

    os.chdir(dirname)
    a=[]
    X=[]
    Y=[]
    k=0
    for file in glob.glob("*.mat"):

        a.append(file)
        # print(a)

    return a

def ReadMatFiles(dirname,indx):


  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]
  ind=[]
  MI=[]
  X=[]
  Y=[]

  for j in list(indx):
    print(j)
    indices = [i for i, elem in enumerate(EDF) if Name[j] in elem]
    ind.append(indices)

  ind=np.concatenate(ind,axis=0)

  for k in range(len(ind)):
    # print(ind[k])
    matfile=loadmat(os.path.join(EDF[int(ind[k])]))
    x=matfile['X_4sec']
    y=matfile['Y_label_4sec']
    mi=matfile['estimated_MI']

    for j in range(mi.shape[0]):

      mi2=mi[j,:,:]
      mi_mod=list(mi2[np.triu_indices(18)])
      MI.append(mi_mod)

    y=np.transpose(y)
    X.append(x)
    Y.append(y)

  X=np.concatenate(X,axis=0)
  Y=np.concatenate(Y,axis=0)
  MI=np.array(MI)

  return X,Y,MI

def Data(dirname):
  X=[]
  Y=[]
  MI=[]
  EDF=PatientsEDFFile(dirname)

  for i in range(len(EDF)):

    matfile=loadmat(os.path.join(dirname, EDF[i]))
    x=matfile['X_4sec']
    y=matfile['Y_label_4sec']
    mi=matfile['estimated_MI']

    for j in range(mi.shape[0]):
      mi2=mi[j,:,:]
      mi_mod=list(mi2[np.triu_indices(18)])
      MI.append(mi_mod)

    y=np.transpose(y)
    X.append(x)
    Y.append(y)


  X=np.concatenate(X,axis=0)
  Y=np.concatenate(Y,axis=0)
  MI=np.array(MI)

  return X,Y,MI

# version 1: filters = 5 kernelsize = 9
## Version2
#     filter1=8
#     filter2=16

#     kernelsize1=7
#     kernelsize2=9
## Version3
#     filter1=8
#     filter2=16

#     kernelsize1=10
#     kernelsize2=22

## Version4
#     filter1=8 ---> at the first CNN and only two dense
#     filter2=16

#     kernelsize1=10
#     kernelsize2=22

## Version5
#     filter1=8 ---> at the first CNN and only two dense
#     filter2=16

#     kernelsize1=22
#     kernelsize2=10

def define_model2():


    model = Sequential()

    filter1=8
    filter2=16

    kernelsize1=22
    kernelsize2=10

    model.add(Conv1D(filter1, kernelsize2, input_shape=(1024,18)))
    model.add(Conv1D(filter1, kernelsize1))
    model.add(BatchNormalization(axis=-1))
    model.add(Activation('relu'))
    model.add(MaxPooling1D(pool_size=2))

    model.add(Conv1D(filter1, kernelsize2))
    model.add(Conv1D(filter1, kernelsize1))
    model.add(BatchNormalization(axis=-1))
    model.add(Activation('relu'))
    model.add(MaxPooling1D(pool_size=2))

    model.add(Conv1D(filter1, kernelsize2))
    model.add(Conv1D(filter1, kernelsize1))
    model.add(BatchNormalization(axis=-1))
    model.add(Activation('relu'))
    model.add(MaxPooling1D(pool_size=2))

    model.add(Conv1D(filter2, kernelsize2))
    model.add(Conv1D(filter2, kernelsize1))
    model.add(BatchNormalization(axis=-1))
    model.add(Activation('relu'))
    model.add(MaxPooling1D(pool_size=2))

    model.add(Conv1D(filter2, kernelsize2))
    model.add(Conv1D(filter2, kernelsize1))
    model.add(BatchNormalization(axis=-1))
    model.add(Activation('relu'))
    model.add(MaxPooling1D(pool_size=2))

    model.add(Conv1D(filter1, 1))

    model.add(Dropout(0.25))
    model.add(Flatten())

# Fully connected layer

    model.add(Dense(8))
    model.add(Dense(8))
    model.add(Dropout(0.5))

    model.add(Dense(1))
    model.add(Activation('sigmoid'))
    model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy', metrics=['accuracy'])

    return model

def define_model3():
    vectorsize=18
    input_shape=(1024,18)
    denseSize=8
    activation='relu'

    filtsize1=22
    filtNo1=8
    filtsize2=10
    filtNo2=16

    PoolSize=2

    input1 = Input(input_shape)

    model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize)
    model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize)
    model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize)
    model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize)
    model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize)


    conv6=Conv1D(filtNo1,1)(model5)
    drop1=Dropout(0.25)(conv6)
    flat=Flatten()(drop1)

# Fully connected layer

    dense=Dense(denseSize)(flat)
##################################################################
    dim_data =int(vectorsize*(vectorsize+1)/2)
    vector_input1 = Input((dim_data,))
    vector_input2 = Input((dim_data,))
    # Concatenate the convolutional features and the vector input
    concat_layer= Concatenate()([flat,vector_input1,vector_input2])
    denseout = Dense(100, activation='relu')(concat_layer)
    denseout = Dense(50, activation='relu')(denseout)
    output = Dense(1, activation='sigmoid')(denseout)

    # define a model with a list of two inputs
    model = Model(inputs=[input1, vector_input1,vector_input2], outputs=output)


    model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy', metrics=['accuracy'])

    return model



dirname='/home/baharsalafian/6FoldData3times'
dirname2='/home/baharsalafian/EEGDataLongDuration'
SaveResults='/home/baharsalafian/CNNSMILE6FoldRes'

test=[]
score=[]
loss1=[]
fold_no=1
batchsize=128
epoch=10
start_time = time.time()
model=define_model3()
FoldNum=6

kfold = KFold(n_splits=FoldNum, shuffle=False)
for trainindx, testindx in kfold.split(range(24)):


#
  X_train,Y_train,mi_train,midiff_train = ReadMatFilesDiff(dirname,trainindx)

  X_test,Y_test,mi_test,midiff_test = ReadMatFilesDiff(dirname,testindx)
  model.fit([X_train,mi_train,midiff_train],Y_train,validation_split=0.2,batch_size=batchsize , epochs=epoch,verbose = 2)

  X_train = None
  Y_train = None
  gc.collect()

  loss, acc = model.evaluate([X_test,mi_test,midiff_test],Y_test, verbose=2)
  score.append(acc)
  loss1.append(loss)
  model.save('/home/baharsalafian/CNNSMILE6FoldRes/CNNSMILE6foldDiff3times'+ str(fold_no)+'.h5')
  fold_no=fold_no+1
  # np.save(os.path.join(SaveResults,'X_test_'+str(fold_no)),X_test)
  # np.save(os.path.join(SaveResults,'Y_test_'+str(fold_no)),Y_test)

  X_test = None
  Y_test = None
  gc.collect()

np.save(os.path.join(SaveResults,'accuracyCNNSMILE6foldDiff3times'),score)
np.save(os.path.join(SaveResults,'lossCNNSMILE6foldDiff3times'),loss1)

print("--- %s seconds ---" % (time.time() - start_time))


# print(EDFFiles[indices[0]])

#   print(indices)
#   test.append(test_index)

# # print(test[2])

# for z in test:
#   indices=ReadMatFiles(dirname,z)
#   print(EDFFiles)

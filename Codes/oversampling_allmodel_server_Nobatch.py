# -*- coding: utf-8 -*-
"""OverSampling_AllModel_Server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xIVapjVuqtJPjCRXKNm6lWw22PmeqR9F
"""

import os
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="1"
import tensorflow as tf
import scipy
import h5py
import glob, os
from scipy.io import loadmat
import math
from keras.models import Model
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
# from keras.datasets import mnist
from tensorflow import keras
from tensorflow.keras.regularizers import l2, l1_l2
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,TimeDistributed, GRU,Concatenate
from tensorflow.keras.optimizers import Adam
from keras.layers import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, GlobalAveragePooling1D,MaxPooling1D,AveragePooling1D
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn import preprocessing
from keras import regularizers
from numpy import mean
from numpy import std
from tqdm.auto import tqdm
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
# from keras.optimizers import Adam
# from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, MaxPooling1D, ZeroPadding1D, GlobalAveragePooling1D,Bidirectional
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import LearningRateScheduler
from sklearn.metrics import plot_precision_recall_curve,roc_curve,roc_auc_score,auc
from sklearn.metrics import precision_recall_fscore_support,precision_recall_curve
from sklearn import preprocessing
# from keras import regularizers
# from regularizers import l1_l2
from numpy import mean
from numpy import std
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
import time
import gc
from keras import backend as K
from sklearn.metrics import accuracy_score
from keras.preprocessing.image import ImageDataGenerator
# datagen = ImageDataGenerator(zca_whitening=True)
# from google.colab import drive
# drive.mount('/content/drive')

def PatientsName():

  Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
  'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
  'chb22','chb23','chb24']
  return Name

def PatientsEDFFile(dirname):

  os.chdir(dirname)
  a=[]
  X=[]
  Y=[]
  k=0
  for file in glob.glob("*.mat"):
      a.append(file)
      # print(a)
  return a



def  Conv_BN_Act_Pool(filtNo,filtsize1,filtsize2,input1,activation,PoolSize,l2_size,drop_size):

  conv1 = Conv1D(filtNo,filtsize1,kernel_regularizer=l2(l2_size))(input1)
  conv2 = Conv1D(filtNo, filtsize2,kernel_regularizer=l2(l2_size))(conv1)
  BN=BatchNormalization(axis=-1)(conv2)
  ActFunc=Activation(activation)(BN)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc)
  # out=Dropout(drop_size)(pool1)

  return pool1

def define_SMILE(drop_size):


  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  l2_size=None
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)

  flat=Flatten()(drop1)
  dense=Dense(denseSize)(flat)
################################################################
  dim_data =int(vectorsize*(vectorsize+1)/2)-18
  vector_input = Input((dim_data,))
  # Concatenate the convolutional features and the vector input
  concat_layer= Concatenate()([flat,vector_input])
  denseout = Dense(100)(concat_layer)
  denseout2 = Dense(50)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)

  # define a model with a list of two inputs
  model = Model(inputs=[input1, vector_input], outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=["accuracy", tf.keras.metrics.AUC(curve="ROC",name='auc_roc'),tf.keras.metrics.AUC(curve="PR",name='auc_pr'),tf.keras.metrics.Precision(name="precision"),tf.keras.metrics.Recall(name="recall")])
  return model

def define_CNN(l2_size,drop_size):

  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)

  denseout = Dense(denseSize)(flat)
  denseout2 = Dense(denseSize)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)
  # define a model with a list of two inputs
  model = Model(inputs=input1, outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])
  return model

def define_2DCNN():


  model = Sequential()
  model.add(Conv2D(8, (1, 3), input_shape=(18,1024,1)))
  # print(input_shape)
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(1,2)))


  model.add(Conv2D(8,(1, 3)))
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(8,(1, 3)))
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(1,2)))


  model.add(Conv2D(16,(1, 3)))
  model.add(Conv2D(16,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(16,(1, 3)))
  model.add(Conv2D(16,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(8,(1, 1)))
  model.add(Dropout(0.25))
  model.add(Flatten())

  model.add(Dense(8))
  model.add(Dense(8))
  model.add(Dropout(0.5))

  model.add(Dense(1))
  model.add(Activation('sigmoid'))
  # model.compile(optimizer=Adam(learning_rate=0.00001),loss='binary_crossentropy', metrics=['accuracy'])

  return model

def CNN_Spectrogram(filtNo1,filtNo2,filtsize,input_shape,activation,PoolSize,denseSize):



  input1 = Input(input_shape)



  BN1=BatchNormalization(axis=-1)(input1)
  conv1 = Conv1D(filtNo1,filtsize)(BN1)
  ActFunc1=Activation(activation)(conv1)

  BN2=BatchNormalization(axis=-1)(ActFunc1)
  conv2 = Conv1D(filtNo1, filtsize)(BN2)
  ActFunc2=Activation(activation)(conv2)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc2)

  BN3=BatchNormalization(axis=-1)(pool1)
  conv3 = Conv1D(filtNo2, filtsize)(BN3)
  ActFunc3=Activation(activation)(conv3)
  pool3=AveragePooling1D(pool_size=PoolSize)(ActFunc3)


  drop=Dropout(0.5)(pool3)
  flat=Flatten()(drop)
  dense=Dense(denseSize)(flat)
  output = Dense(1, activation='sigmoid')(dense)
  model = Model(inputs=input1, outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy', metrics=["accuracy", tf.keras.metrics.AUC(curve="ROC",name='auc_roc'),tf.keras.metrics.AUC(curve="PR",name='auc_pr'),f1_score_met,fbeta,precision,recall])
  return model

def define_CNNSMILEDiff(l2_size,drop_size):

  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)
# lly connected layer
  dense=Dense(denseSize)(flat)
################################################################
  dim_data =int(vectorsize*(vectorsize+1)/2)-18
  vector_input1 = Input((dim_data,))
  vector_input2 = Input((dim_data,))
  # Concatenate the convolutional features and the vector input
  concat_layer= Concatenate()([flat,vector_input1,vector_input2])
  denseout1 = Dense(100, activation='relu')(concat_layer)
  denseout2 = Dense(50, activation='relu')(denseout1)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)
  # define a model with a list of two inputs
  model = Model(inputs=[input1, vector_input1,vector_input2], outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.00001),loss='binary_crossentropy', metrics=['accuracy'])
  return model

def define_CNNSpecSMILE(l2_size,drop_size):


  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  input2=Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)

  flat=Flatten()(drop1)
  dense=Dense(denseSize)(flat)
################################################################
  dim_data =int(vectorsize*(vectorsize+1)/2)-18
  vector_input = Input((dim_data,))
  flat2=Flatten()(input2)
  # Concatenate the convolutional features and the vector input
  concat_layer= Concatenate()([flat,flat2,vector_input])
  denseout = Dense(100)(concat_layer)
  denseout = Dense(50)(denseout)
  output = Dense(1, activation='sigmoid')(denseout)

  # define a model with a list of two inputs
  model = Model(inputs=[input1,input2, vector_input], outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy',metrics=["accuracy", tf.keras.metrics.AUC(curve="ROC",name='auc_roc'),tf.keras.metrics.AUC(curve="PR",name='auc_pr'),f1_score_met,fbeta,precision,recall])
  return model

def define_model_CNNGRU(l2_size,drop_size):


  memory=3
  vectorsize=18
  input_shape=(1024,18)
  input_shape_GRU=(memory,1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  inputGRU=Input(input_shape_GRU)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)
  cnn=Model(inputs=input1,outputs=flat)
  encoded_frames = TimeDistributed(cnn)(inputGRU)
  encoded_sequence = Bidirectional(GRU(50, return_sequences=True))(encoded_frames)
  output=TimeDistributed(Dense(1,activation='sigmoid'))(encoded_sequence)

  model = Model(inputs=inputGRU, outputs=output)
  # model.compile(optimizer=Adam(learning_rate=0.00001),loss='binary_crossentropy', metrics=['accuracy'])
  return model

def create_sub_seq(nn_input, len_ss, labels=None):

  """
  This function creates all sub sequences for the batch
  """
  n_seq = nn_input.shape[0]
  len_seq = nn_input.shape[1]
  n_ss = len_seq - len_ss + 1
  new_labels = []
  if nn_input.ndim == 3:
    new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2]))
  elif nn_input.ndim == 4:
    new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2], nn_input.shape[3]))
  if labels is not None:
      dim_labels = labels.shape
      if len(dim_labels) == 2:
          new_labels = np.zeros((n_ss*n_seq, len_ss))
      elif len(dim_labels) == 3:
          new_labels = np.zeros((n_ss * n_seq, len_ss, dim_labels[2]))
  k = 0
  for i in range(n_seq):
      for j in range(n_ss):
          new_inp[k] = nn_input[i, j:j + len_ss, :]
          if labels is not None:
              if len(dim_labels) == 2:
                  new_labels[k, :] = labels[i, j:j + len_ss]
              elif len(dim_labels) == 3:
                  new_labels[k, :, :] = labels[i, j:j + len_ss, :]
          k += 1
  return new_inp, n_ss, new_labels

def SelectIndx(EDFNo,ind):

  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()

  indx=[]
  for j in range(len(ind)):
    # print(j)
    indices = [i for i, elem in enumerate(EDF) if Name[j] in elem]
    indx.append(indices)

  indtest=[]
  indtrain=[]
  for i in range(len(indx)):

    for k in range(len(indx[i])):
      # print(len(indx[i]))

      if k==EDFNo:
        indtest.append(indx[i][k])
        # print(indtest)

      else:
        indtrain.append(indx[i][k])
        # print(indtrain)

  # indtest=np.concatenate(indtest,axis=0)
  # indtrain=np.concatenate(indtrain,axis=0)
  # print(len(indtest))
  return indtest,indtrain

def ReadMatFiles(dirname,dirname2,ind, seq_len=1,diff=None):

  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]
  spec=[]

  MI_all=[]
  X=[]
  Y=[]
  MI_diff_all=[]
  # print(ind)
  for k in range(len(ind)):

    print(EDF[ind[k]])
    matfile=loadmat(os.path.join(dirname,EDF[ind[k]]))

    Name2=EDF[ind[k]].split('.')
    # matfile2=loadmat(os.path.join(dirname2,Name2[0]+'_Spectogram.mat'))
    matfile2=loadmat(os.path.join(dirname2,EDF[ind[k]]))
    Spectrogram=matfile2['spectogram']
    x=matfile['X_4sec']
    y=matfile['Y_label_4sec']
    mi=matfile['estimated_MI']
    y=np.transpose(y)

    start_idx = np.argmax(y>0)
    a = y == 1
    end_idx = len(a) - np.argmax(np.flip(a)) - 1
    real_y = np.zeros_like(y)
    real_y[start_idx:end_idx+1] = 1
    MI=np.zeros((mi.shape[0],153))
    for j in range(mi.shape[0]):
      mi2=mi[j,:,:]
      mi_mod=list(mi2[np.triu_indices(18,k=1)])
      MI[j,:]=mi_mod


    MI_diff=[]
    if seq_len > 1:
      real_y = np.expand_dims(real_y, axis=0)
      x = np.expand_dims(x, axis=0)
      MI = np.expand_dims(MI, axis=0)
      # print(MI.shape)
      x, _ , real_y = create_sub_seq(x, seq_len, labels=real_y)
      MI, _, _ = create_sub_seq(MI, seq_len)
      # print(x.shape)
      # print(real_y.shape)
      # print(MI.shape)

    if diff is not None:

      for j in range(MI.shape[0]-1):

        MI_diff.append(MI[j+1]-MI[j])

      MI_diff=np.array(MI_diff)
      MI=MI[1:]
      x=x[1:]
      real_y=real_y[1:]
      Spectrogram=Spectrogram[1:]
    X.append(x)
    Y.append(real_y)
    MI_all.append(MI)
    MI_diff_all.append(MI_diff)
    spec.append(Spectrogram)


  X=np.concatenate(X,axis=0)
  Y=np.concatenate(Y,axis=0)
  spec=np.concatenate(spec,axis=0)

  MI_all=np.concatenate(MI_all,axis=0)
  MI_diff_all=np.concatenate(MI_diff_all,axis=0)
  print(Y)
  print(X.shape)
  print(Y.shape)
  print(MI_all.shape)
  print(MI_diff_all.shape)

  return X, Y, MI_all, MI_diff_all,spec

def ReadMatFiles2(dirname,dirname2,name, seq_len=1,diff=None):

  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]
  spec=[]

  MI_all=[]
  X=[]
  Y=[]
  MI_diff_all=[]
  # print(ind)

  matfile=loadmat(os.path.join(dirname,name))
  # Name2=EDF[ind[k]].split('.')
  # matfile2=loadmat(os.path.join(dirname2,Name2[0]+'_Spectogram.mat'))
  # matfile=loadmat(os.path.join(dirname,name))
  Spectrogram=matfile['spectogram']
  x=matfile['X_4sec']
  y=matfile['Y_label_4sec']
  mi=matfile['estimated_MI']
  y=np.transpose(y)
  start_idx = np.argmax(y>0)
  a = y == 1
  end_idx = len(a) - np.argmax(np.flip(a)) - 1
  real_y = np.zeros_like(y)
  real_y[start_idx:end_idx+1] = 1
  MI=np.zeros((mi.shape[0],153))
  for j in range(mi.shape[0]):
    mi2=mi[j,:,:]
    mi_mod=list(mi2[np.triu_indices(18,k=1)])
    MI[j,:]=mi_mod
  MI_diff=[]
  if seq_len > 1:
    real_y = np.expand_dims(real_y, axis=0)
    x = np.expand_dims(x, axis=0)
    MI = np.expand_dims(MI, axis=0)
    # print(MI.shape)
    x, _ , real_y = create_sub_seq(x, seq_len, labels=real_y)
    MI, _, _ = create_sub_seq(MI, seq_len)
    # print(x.shape)
    # print(real_y.shape)
    # print(MI.shape)
  if diff is not None:

    for j in range(MI.shape[0]-1):

        MI_diff.append(MI[j+1]-MI[j])

    MI_diff=np.array(MI_diff)
    MI=MI[1:]
    x=x[1:]
    real_y=real_y[1:]
    Spectrogram=Spectrogram[1:]
  X=x
  Y=real_y
  MI_all=MI
  MI_diff_all=MI_diff
  spec=Spectrogram


  # X=np.concatenate(X,axis=0)
  # Y=np.concatenate(Y,axis=0)
  # spec=np.concatenate(spec,axis=0)

  # MI_all=np.concatenate(MI_all,axis=0)
  # MI_diff_all=np.concatenate(MI_diff_all,axis=0)
  # print(Y)
  # print(X.shape)
  # print(Y.shape)
  # print(MI_all.shape)
  # print(MI_diff_all.shape)

  return X, Y, MI_all, MI_diff_all,spec

def MeanStdVar(mylist):
  # mylist=np.array(mylist)
  ListMean=np.mean(mylist,axis=0)
  ListStd=np.std(mylist)
  ListVar=np.var(mylist)

  return ListMean,ListStd,ListVar

def lr_exp_decay(epoch, lr):
  # k = math.sqrt(2)
  k=1
  if lr>0.00001:
    return lr / k
  else:
    return lr

def split(x,y,mi,spectrogram):

  ind_one=[i for i,x in enumerate(y) if x== 1]
  ind_zero=[i for i,x in enumerate(y) if x== 0]

  y_zero=y[ind_zero]
  y_one=y[ind_one]

  x_zero=x[ind_zero]
  x_one=x[ind_one]

  mi_zero=mi[ind_zero]
  mi_one=mi[ind_one]

  spectrogram_zero=spectrogram[ind_zero]
  spectrogram_one=spectrogram[ind_one]

  return x_zero,y_zero,mi_zero,spectrogram_zero,x_one,y_one,mi_one,spectrogram_one

def make_batches(x_one,x_zero,y_one,y_zero,mi_one,mi_zero,spectrogram_one,spectrogram_zero,i,mini_batch):

  total_sample=x_one.shape[0]
  # print(len(x_zero) // 128)

  selected_idx = np.random.choice(total_sample,mini_batch)
  x_zero_batch= x_zero[i * mini_batch:min(len(x_zero), (i+1) * mini_batch)]
  mi_zero_batch= mi_zero[i * mini_batch:min(len(mi_zero), (i+1) * mini_batch)]
  # print(X.shape)
  y_zero_batch = y_zero[i * mini_batch:min(len(y_zero), (i+1) * mini_batch)]
  spectrogram_zero_batch = spectrogram_zero[i * mini_batch:min(len(spectrogram_zero), (i+1) * mini_batch)]

  x_one_batch=x_one[selected_idx]
  y_one_batch=y_one[selected_idx]
  mi_one_batch=mi_one[selected_idx]
  spectrogram_one_batch=spectrogram_one[selected_idx]

  x_batch=np.concatenate((x_zero_batch, x_one_batch), axis=0)
  y_batch=np.concatenate((y_zero_batch, y_one_batch), axis=0)
  mi_batch=np.concatenate((mi_zero_batch, mi_one_batch), axis=0)
  spectrogram_batch=np.concatenate((spectrogram_zero_batch, spectrogram_one_batch), axis=0)

  return x_batch,y_batch,mi_batch,spectrogram_batch

def Make_X(model,cnn,smile,spect,cnnsmilespec,twodcnn,diff,x,mi,spectrogram,test):

  if cnn==1:
    X_train=x
    if test==1:
      y_pred = model(X_train, training=False)

    else:
      y_pred = model(X_train, training=True)



  if smile==1:
    X_train=[x,mi]
    if test==1:
      y_pred = model([x,mi], training=False)

    else:
      y_pred = model([x,mi], training=True)

  if diff==1:
    X_train=[x,mi,mi_diff]
    if test==1:
      y_pred = model([x,mi,mi_diff], training=False)

    else:
      y_pred = model([x,mi,mi_diff], training=True)

  if twodcnn==1:
    x=x.reshape(x.shape[0],x.shape[2],x.shape[1],1)
    X_train=x
    if test==1:
      y_pred = model(X_train, training=False)

    else:
      y_pred = model(X_train, training=True)

  if spect==1:
    X_train=spectrogram
    if test==1:
      y_pred = model(X_train, training=False)

    else:
      y_pred = model(X_train, training=True)

  if cnnsmilespec==1:
    X_train=[x,spectrogram,mi]
    if test==1:
      y_pred = model([x,spectrogram,mi], training=False)

    else:
      y_pred = model([x,spectrogram,mi], training=True)

  return y_pred

def train_on_batch(model,X_train, y_train, mi,spec_train,batch_size,mini_batch,cnn,smile,spect,cnnsmilespec,twodcnn,diff):

  x_zero,y_zero,mi_zero,spectrogram_zero,x_one,y_one,mi_one,spectrogram_one=split(X_train, y_train, mi,spec_train)

  for i in range(0, len(X_train) // batch_size):

    x_batch,y_batch,mi_batch,spectrogram_batch=make_batches(x_one,x_zero,y_one,y_zero,mi_one,mi_zero,spectrogram_one,spectrogram_zero,i,mini_batch)

    with tf.GradientTape() as tape:

      y_pred=Make_X(model,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,x_batch,mi_batch,spectrogram_batch,test=0)
      loss = loss_fn(y_batch, y_pred)

    gradients = tape.gradient(loss, model.trainable_weights)
    optimizer.apply_gradients(zip(gradients, model.trainable_weights))
    acc_metric.update_state(y_batch, y_pred)
    roc_metric.update_state(y_batch,y_pred)
    pr_metric.update_state(y_batch,y_pred)
    precision_metric.update_state(y_batch,y_pred)
    recall_metric.update_state(y_batch,y_pred)
    loss_avg.update_state(loss)

  train_loss=loss_avg.result()
  train_acc = acc_metric.result()
  train_roc=roc_metric.result()
  train_pr=pr_metric.result()
  train_precision=precision_metric.result()
  train_recall=recall_metric.result()
  train_f1score=2*(train_precision*train_recall)/(train_precision+train_recall)
  print(f"Train: accuracy over epoch {train_acc}, ROC= {train_roc}, PR= {train_pr} , Precision={train_precision}, Recall={train_recall}, f1score={train_f1score} , loss_train={train_loss}")
  acc_metric.reset_states()
  roc_metric.reset_state()
  pr_metric.reset_state()
  precision_metric.reset_state()
  recall_metric.reset_state()
  loss_avg.reset_state()

  return model,train_loss,train_acc,train_roc,train_pr,train_precision,train_recall,train_f1score

def make_train_batch(X_train, y_train, mi,spec_train,batch_size,mini_batch,cnn,smile,spect,cnnsmilespec,twodcnn,diff):

  x_zero,y_zero,mi_zero,spectrogram_zero,x_one,y_one,mi_one,spectrogram_one=split(X_train, y_train, mi,spec_train)
  X=[]
  Y=[]
  MI=[]
  Spec=[]

  for i in range(0, len(X_train) // batch_size):

    x_batch,y_batch,mi_batch,spectrogram_batch=make_batches(x_one,x_zero,y_one,y_zero,mi_one,mi_zero,spectrogram_one,spectrogram_zero,i,mini_batch)

    x_batch=np.expand_dims(x_batch, axis=0)
    y_batch=np.expand_dims(y_batch, axis=0)
    mi_batch=np.expand_dims(mi_batch, axis=0)
    spectrogram_batch=np.expand_dims(spectrogram_batch, axis=0)

    X.append(x_batch)
    Y.append(y_batch)
    MI.append(mi_batch)
    Spec.append(spectrogram_batch)

  X=np.concatenate(X,axis=0)
  Y=np.concatenate(Y,axis=0)
  MI=np.concatenate(MI,axis=0)
  Spec=np.concatenate(Spec,axis=0)

  return X,Y,MI,Spec

def test_on_batch(model,X_test,mitest,y_test,spectrogram_test,batch_size,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff):
  for i in range(0, len(X_test) // batch_size):

    x_batch= X_test[i * batch_size:min(len(X_test), (i+1) * batch_size)]
    mi_batch=mitest[i * batch_size:min(len(mitest), (i+1) * batch_size)]
    y_batch = y_test[i * batch_size:min(len(y_test), (i+1) * batch_size)]
    spectrogram_batch = spectrogram_test[i * batch_size:min(len(spectrogram_test), (i+1) * batch_size)]

    # X_test=Make_X(cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,x_batch,mi_batch,spectrogram_batch)

    y_pred=Make_X(model,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,x_batch,mi_batch,spectrogram_batch,test=1)

    loss_val=loss_fn(y_batch, y_pred)
    val_loss_avg.update_state(loss_val)
    val_acc_metric.update_state(y_batch, y_pred)
    val_roc_metric.update_state(y_batch,y_pred)
    val_pr_metric.update_state(y_batch,y_pred)
    val_precision_metric.update_state(y_batch,y_pred)
    val_recall_metric.update_state(y_batch,y_pred)
  # test_acc = acc_metric.result()
  test_loss=val_loss_avg.result()
  test_acc = val_acc_metric.result()
  test_roc=val_roc_metric.result()
  test_pr=val_pr_metric.result()
  test_precision=val_precision_metric.result()
  test_recall=val_recall_metric.result()
  test_f1score=2*(test_precision*test_recall)/(test_precision+test_recall)
  print(f"Test: accuracy over epoch {test_acc}, ROC= {test_roc}, PR= {test_pr} , Precision={test_precision}, Recall={test_recall}, f1score={test_f1score},loss_test={test_loss} ")
  val_acc_metric.reset_states()
  val_roc_metric.reset_state()
  val_pr_metric.reset_state()
  val_precision_metric.reset_state()
  val_recall_metric.reset_state()
  val_loss_avg.reset_state()
  return test_loss,test_acc,test_roc,test_pr,test_precision,test_recall,test_f1score

def Get_results(model,num_epochs,X_train, y_train, mi,spec_train,X_test, y_test, mitest,spec_test,batch_size,mini_batch,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff):

  class Antoine:
    pass
  loss=[]
  loss_val=[]

  acc=[]
  acc_val=[]

  f1=[]
  f1_val=[]

  ROC=[]
  ROC_val=[]

  PR=[]
  PR_val=[]

  PR_m=[]
  PR_m_val=[]

  recall=[]
  recall_val=[]
  lr_get=[]
  for epoch in range(0, num_epochs):

    print(optimizer.learning_rate)
    # print(f"\nStart of Training Epoch {epoch}")
    print("\nepoch {}/{}".format(epoch+1,num_epochs))

    train_loss=[]
    test_loss=[]
    model,train_loss,train_acc,train_roc,train_pr,train_precision,train_recall,train_f1score=train_on_batch(model,X_train, y_train, mi,spec_train,batch_size,mini_batch,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)
    # model=model2
    test_loss,test_acc,test_roc,test_pr,test_precision,test_recall,test_f1score=test_on_batch(model,X_test,mitest, y_test,spec_test,batch_size,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)
    print("after batch show me", test_pr)
    lr=optimizer.learning_rate
    lr_new=lr_exp_decay(epoch, lr.numpy())
    print("new LR", lr_new)
    optimizer.learning_rate=lr_new

    loss.append(train_loss.numpy())
    loss_val.append(test_loss.numpy())

    acc.append(train_acc.numpy())
    acc_val.append(test_acc.numpy())

    f1.append(train_f1score.numpy())
    f1_val.append(test_f1score.numpy())

    ROC.append(train_roc.numpy())
    ROC_val.append(test_roc.numpy())

    PR.append(train_pr.numpy())
    PR_val.append(test_pr.numpy())

    PR_m.append(train_precision.numpy())
    PR_m_val.append(test_precision.numpy())

    recall.append(train_recall.numpy())
    recall_val.append(test_recall.numpy())

    lr_get.append(lr.numpy())


  loss=np.array(loss)
  loss_val=np.array(loss_val)

  acc=np.array(acc)
  acc_val=np.array(acc_val)

  f1=np.array(f1)
  f1_val=np.array(f1_val)

  ROC=np.array(ROC)
  ROC_val=np.array(ROC_val)

  PR=np.array(PR)
  PR_val=np.array(PR_val)

  PR_m=np.array(PR_m)
  PR_m_val=np.array(PR_m_val)

  recall=np.array(recall)
  recall_val=np.array(recall_val)
  lr_get=np.array(lr_get)

  history = Antoine()

  history= {'name':'benzene',
     'loss':loss,
     'val_loss':loss_val,
     'accuracy':acc,
     'val_accuracy':acc_val,
     'f1_score':f1,
     'val_f1_score':f1_val,
     'auc_roc':ROC,
     'val_auc_roc':ROC_val,
     'auc_pr':PR,
     'val_auc_pr':PR_val,
     'precision':PR_m,
     'val_precision':PR_m_val,
     'recall':recall,
     'val_recall':recall_val,
     'lr':lr_get }

  return model,history

def Plot_func(SaveHisResults,metric,metric_val,metric_name,modelname,epoch,batchSize):

  metric_mean,metric_std,_=MeanStdVar(metric)
  metric_val_mean,metric_val_std,_=MeanStdVar(metric_val)


  plt.plot(metric_mean)
  plt.plot(metric_val_mean)
  plt.title(modelname+'_'+metric_name+'epoch_'+str(epoch)+'_batchsize_'+str(batchSize))
  plt.legend(['train', 'test'], loc='upper left')

  plt.fill_between(range(epoch), metric_mean-metric_std, metric_mean+metric_std, color='blue', alpha = 0.5)
  plt.fill_between(range(epoch), metric_val_mean-metric_val_std, metric_val_mean+metric_val_std, color='orange', alpha = 0.5)

  plt.ylabel('%')
  plt.xlabel('epoch')
  plt.savefig(SaveHisResults+'/'+'history_'+modelname+'_'+metric_name+'_epoch_'+str(epoch)+'_batchsize_'+str(batchSize)+'.pdf', format='pdf', bbox_inches = 'tight')
  plt.clf()

def Select_Model(cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,drop_size):

  if cnn==1:
    tf.keras.backend.clear_session()
    model=define_CNN(drop_size)

  if smile==1:
    tf.keras.backend.clear_session()
    model=define_SMILE(drop_size)

  if diff==1:
    tf.keras.backend.clear_session()
    model=define_CNNSMILEDiff(drop_size)

  if twodcnn==1:

    tf.keras.backend.clear_session()
    model=define_2DCNN()


  if spectrogram==1:
    tf.keras.backend.clear_session()
    model=CNN_Spectrogram(filtNo1=120,filtNo2=160,filtsize=5,input_shape=(1024,18),activation='relu',PoolSize=3,denseSize=8)

  if cnnsmilespec==1:
    tf.keras.backend.clear_session()
    model=define_CNNSpecSMILE(drop_size)

  return model

def train_step(x,y,mi,spec,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff):
  print("smile",smile)
  if cnn==1:
    with tf.GradientTape() as tape:

      logits = model(x, training=True)
      loss_value = loss_fn(y, logits)

  if smile==1:

    with tf.GradientTape() as tape:
      logits = model([x,mi], training=True)
      loss_value = loss_fn(y, logits)

  if spectrogram==1:
    with tf.GradientTape() as tape:
      logits = model(spec, training=True)
      loss_value = loss_fn(y, logits)

  if cnnsmilespec==1:
    with tf.GradientTape() as tape:
      logits = model([x,spec,mi], training=True)
      loss_value = loss_fn(y, logits)

  grads = tape.gradient(loss_value, model.trainable_weights)
  optimizer.apply_gradients(zip(grads, model.trainable_weights))
  acc_metric.update_state(y, logits)
  roc_metric.update_state(y,logits)
  pr_metric.update_state(y,logits)
  precision_metric.update_state(y,logits)
  recall_metric.update_state(y,logits)
  loss_avg.update_state(loss_value)

  return loss_value

def test_step(x,y,mi,spec,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff):
  print("smile",smile)
  if cnn==1:
    logits = model(x, training=False)
    loss_value = loss_fn(y, logits)

  if smile==1:
    logits = model([x,mi], training=False)
    loss_value = loss_fn(y, logits)

  if spectrogram==1:

    logits = model(spec, training=False)
    loss_value = loss_fn(y, logits)

  if cnnsmilespec==1:

    logits = model([x,spec,mi], training=False)
    loss_value = loss_fn(y, logits)

  val_acc_metric.update_state(y, logits)
  val_roc_metric.update_state(y,logits)
  val_pr_metric.update_state(y,logits)
  val_precision_metric.update_state(y,logits)
  val_recall_metric.update_state(y,logits)
  val_loss_avg.update_state(loss_value)

  return loss_value
def Metrics(y,y_pred):

  acc=accuracy_score(y, y_pred)
  fpr1, tpr1, _ = roc_curve(y, y_pred)
  precision, recall, _ = precision_recall_curve(y, y_pred)
  PR=auc(recall, precision)
  ROC=roc_auc_score(y, y_pred)
  fscore=2*(precision*recall)/(precision+recall)
  return acc,PR,ROC,precision,recall,fscore

def test_pred(model,x,y,mi,spec,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff):
  print("smile",smile)
  if cnn==1:
    logits=model.predict(x)
    acc,PR,ROC,precision,recall,fscore=Metrics(y,logits.astype(int))
    loss_value = loss_fn(y, logits)

  if smile==1:
    logits = model.predict([x,mi])
    acc,PR,ROC,precision,recall,fscore=Metrics(y,logits.astype(int))
    loss_value = loss_fn(y, logits)
  if spectrogram==1:
    logits = model.predict(spec)
    acc,PR,ROC,precision,recall,fscore=Metrics(y,logits.astype(int))
    loss_value = loss_fn(y, logits)

  if cnnsmilespec==1:
    logits = model.predict([x,spec,mi])
    acc,PR,ROC,precision,recall,fscore=Metrics(y,logits.astype(int))
    loss_value = loss_fn(y, logits)
  # val_acc_metric.update_state(y, logits)
  # val_roc_metric.update_state(y,logits)
  # val_pr_metric.update_state(y,logits)
  # val_precision_metric.update_state(y,logits)
  # val_recall_metric.update_state(y,logits)
  # val_loss_avg.update_state(loss_value)
  return loss_value,acc,PR,ROC,precision,recall,fscore

dirname2='/media/datadrive/bsalafian/AllMatFiles'
dirname='/media/datadrive/bsalafian/6FoldCrossSMILE'
SaveHisResults='/home/baharsalafian/Custom_train_AllModels'
ModelResults='/home/baharsalafian/Custom_model_AllModels'

modelname='CNNSMILE_24Testfiles_Nodecay_Nobatch'
initLR=0.001
cnn=0
smile=1
spectrogram=0
cnnsmilespec=0
twodcnn=0
diff=0
num_epochs=100
batch_size=256
SeqLen=1
l2_size=None
drop_size=0


EDFFiles=PatientsEDFFile(dirname)


# def Model_train(dirname,dirname2,ModelResults,SaveHisResults,modelname,initLR,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,num_epochs,batch_size,SeqLen,l2_size,drop_size):
FoldNum=2
loss=np.zeros((FoldNum, num_epochs))
loss_val=np.zeros((FoldNum, num_epochs))
acc=np.zeros((FoldNum, num_epochs))
acc_val=np.zeros((FoldNum, num_epochs))
LR=np.zeros((FoldNum, num_epochs))
f1=np.zeros((FoldNum, num_epochs))
f1_val=np.zeros((FoldNum, num_epochs))
ROC=np.zeros((FoldNum, num_epochs))
ROC_val=np.zeros((FoldNum, num_epochs))
PR=np.zeros((FoldNum, num_epochs))
PR_val=np.zeros((FoldNum, num_epochs))
PR_m=np.zeros((FoldNum, num_epochs))
PR_m_val=np.zeros((FoldNum, num_epochs))
recall=np.zeros((FoldNum, num_epochs))
recall_val=np.zeros((FoldNum, num_epochs))

acc_all=[]
val_acc_all=[]

loss_all=[]
val_loss_all=[]

f1_all=[]
val_f1_all=[]
PR_all=[]
val_PR_all=[]
ROC_all=[]
val_ROC_all=[]
PR_m_all=[]
val_PR_m_all=[]
recall_all=[]
val_recall_all=[]




kfold = KFold(n_splits=FoldNum, shuffle=False)
# start_time = time.time()
fold_no=1
indx=range(0,24)
start_time = time.time()
mini_batch=int(batch_size/2)
for i in range(2):
  # batch_size=256
  # num_epochs = 2

  testindx,trainindx=SelectIndx(i,indx)
  X_train, y_train, mi,mi_diff,spec_train=ReadMatFiles(dirname,dirname2,trainindx,seq_len=SeqLen,diff=None)
  # x_zero,y_zero,mi_zero,spectrogram_zero,x_one,y_one,mi_one,spectrogram_one=split(X_train, y_train, mi,spec_train)
  X_test, y_test, mitest,mitest_diff,spec_test=ReadMatFiles(dirname,dirname2,testindx,seq_len=SeqLen,diff=None)

  x_zero,y_zero,mi_zero,spectrogram_zero,x_one,y_one,mi_one,spectrogram_one=split(X_train,y_train,mi,spec_train)

  print(len(X_train))
  # test_data = tf.data.Dataset.from_tensor_slices((X_test, y_test, mitest,spec_test)).shuffle(buffer_size=len(X_test)).batch(batch_size)
  # test_data = tf.data.Dataset.from_tensor_slices((X_test, y_test, mitest,spec_test))
  # print("this is test ",test_data)
  x_tr,y_tr,mi_tr,spec_tr=make_train_batch(X_train, y_train, mi,spec_train,batch_size,mini_batch,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)
  print(x_tr.shape)
  train_data = tf.data.Dataset.from_tensor_slices((x_tr,y_tr,mi_tr,spec_tr))
  print("this is train    ",train_data)
  # test_data = tf.data.Dataset.from_tensor_slices((X_test, y_test, mitest,spec_test)).shuffle(buffer_size=len(X_test)).batch(batch_size)
# #
  optimizer = keras.optimizers.Adam(learning_rate=initLR)
  loss_fn=tf.keras.losses.BinaryCrossentropy()
  acc_metric=tf.keras.metrics.BinaryAccuracy()
  roc_metric=tf.keras.metrics.AUC(curve="ROC")
  pr_metric=tf.keras.metrics.AUC(curve="PR")
  precision_metric=tf.keras.metrics.Precision()
  recall_metric=tf.keras.metrics.Recall()
  loss_avg = tf.keras.metrics.Mean()

  val_acc_metric=tf.keras.metrics.BinaryAccuracy()
  val_roc_metric=tf.keras.metrics.AUC(curve="ROC")
  val_pr_metric=tf.keras.metrics.AUC(curve="PR")
  val_precision_metric=tf.keras.metrics.Precision()
  val_recall_metric=tf.keras.metrics.Recall()
  val_loss_avg = tf.keras.metrics.Mean()




# EDFFiles=PatientsEDFFile(dirname)

  # batch_size=256
  # num_epochs = 2
  tf.keras.backend.clear_session()
  model=Select_Model(cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff,drop_size)

# model=define_SMILE(tf.constant(drop_size))
  train_on=tf.function(train_step)
  test_on=tf.function(test_step)
  # print(test_data)

  for epoch in range(num_epochs):
    lr=optimizer.learning_rate
    print("\nepoch {}/{}".format(epoch+1,num_epochs))

    # start_time = time.time()
      # Iterate over the batches of the dataset.
    j=0
    for step,(x_batch_train, y_batch_train,mi,spec) in enumerate(train_data):
      # print("num of batch", j+1)
      # print(x_batch_train.shape)
      loss_value = train_on(x_batch_train,y_batch_train,mi,spec,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)

    train_acc = acc_metric.result()
    train_loss=loss_avg.result()
    train_roc=roc_metric.result()
    train_pr=pr_metric.result()
    train_precision=precision_metric.result()
    train_recall=recall_metric.result()
    train_f1score=2*(train_precision*train_recall)/(train_precision+train_recall)

    print(f"Train: accuracy over epoch= {train_acc:.4f}, ROC= {train_roc:.4f}, PR= {train_pr:.4f} , Precision={train_precision:.4f}, Recall={train_recall:.4f}, f1score={train_f1score:.4f} , loss_train={train_loss:.4f}")

    acc_metric.reset_states()
    roc_metric.reset_state()
    pr_metric.reset_state()
    precision_metric.reset_state()
    recall_metric.reset_state()
    loss_avg.reset_state()

    loss_value,test_acc,test_pr,test_roc,test_precision,test_recall,test_f1score=test_pred(model,X_test, y_test, mitest,spec_test,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)

    # for (x_batch_test, y_batch_test,mi_test,spec_test) in test_data:
    #
    #   # print(x_batch_train.shape)
    #   loss_value = test_on(x_batch_test, y_batch_test,mi_test,spec_test,cnn,smile,spectrogram,cnnsmilespec,twodcnn,diff)

    # test_acc = val_acc_metric.result()
    # test_loss=val_loss_avg.result()
    # test_roc=val_roc_metric.result()
    # test_pr=val_pr_metric.result()
    # test_precision=val_precision_metric.result()
    # test_recall=val_recall_metric.result()
    # test_f1score=2*(test_precision*test_recall)/(test_precision+test_recall)

    lr_new=lr_exp_decay(epoch, lr.numpy())
    print("new LR", lr_new)
    optimizer.learning_rate=lr_new
    print(f"Test: accuracy over epoch= {test_acc}, ROC= {test_roc}, PR= {test_pr} , Precision={test_precision[0]}, Recall={test_recall[0]}, f1score={test_f1score[0]}, loss={loss_value}")

    # val_acc_metric.reset_states()
    # val_roc_metric.reset_state()
    # val_pr_metric.reset_state()
    # val_precision_metric.reset_state()
    # val_recall_metric.reset_state()
    # val_loss_avg.reset_state()
    #
    # acc[i,epoch]=train_acc
    # acc_val[i,epoch]=test_acc
    #
    # loss[i,epoch]=train_loss
    # loss_val[i,epoch]=test_loss
    #
    # f1[i,epoch]=train_f1score
    # f1_val[i,epoch]=test_f1score
    #
    # PR[i,epoch]=train_pr
    # PR_val[i,epoch]=test_pr
    #
    # ROC[i,epoch]=train_roc
    # ROC_val[i,epoch]=test_roc
    #
    # PR_m[i,epoch]=train_precision
    # PR_m_val[i,epoch]=test_precision
    #
    # recall[i,epoch]=train_recall
    # recall_val[i,epoch]=test_recall
    #
    # LR[i,epoch]=lr.numpy()



# print("length of acc",acc_all[0].shape, acc_all[1].shape)
# print("length of acc_train", val_acc_all[0].shape, val_acc_all[1].shape)
# Plot_func(SaveHisResults,acc,acc_val,'accuracy'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,loss,loss_val,'loss'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,f1,f1_val,'f1_score'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,PR,PR_val,'AUC_PR'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,ROC,ROC_val,'AUC_ROC'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,PR_m,PR_m_val,'Precision'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)
# Plot_func(SaveHisResults,recall,recall_val,'Recall'+'_initLR_'+str(initLR)+'_',modelname,num_epochs,batch_size)

print("--- %s seconds ---" % (time.time() - start_time))

# -*- coding: utf-8 -*-
"""FineTunningEvaluateGRUMedium.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jYT_wp5KfMLguTijhYdFAqfhtNrHixMZ
"""
import os
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="3"
import tensorflow as tf
import scipy
import h5py
import glob, os
from scipy.io import loadmat
import statistics
from keras.models import Model
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
# from keras.datasets import mnist
from tensorflow.keras.regularizers import l2, l1_l2
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,TimeDistributed, GRU,Concatenate
from keras.optimizers import Adam
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, GlobalAveragePooling1D,MaxPooling1D,AveragePooling1D
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn import preprocessing
from keras import regularizers
from numpy import mean
from numpy import std
from tqdm.auto import tqdm
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from keras.optimizers import Adam
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from keras.layers import Conv1D, MaxPooling1D, ZeroPadding1D, GlobalAveragePooling1D,Bidirectional
from keras.layers.advanced_activations import LeakyReLU
from keras.preprocessing.image import ImageDataGenerator
from sklearn import preprocessing
# from keras import regularizers
# from regularizers import l1_l2
from numpy import mean
from numpy import std
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
import time
import gc
from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(zca_whitening=True)
# from google.colab import drive
# drive.mount('/content/drive')

def PatientsName():

  Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
  'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
  'chb22','chb23','chb24']
  return Name

def PatientsEDFFile(dirname):

  os.chdir(dirname)
  a=[]
  X=[]
  Y=[]
  k=0
  for file in glob.glob("*.mat"):
      a.append(file)
      # print(a)
  return a

def  Conv_BN_Act_Pool(filtNo,filtsize1,filtsize2,input1,activation,PoolSize,l2_size,drop_size):

  conv1 = Conv1D(filtNo,filtsize1,kernel_regularizer=l2(l2_size))(input1)
  conv2 = Conv1D(filtNo, filtsize2,kernel_regularizer=l2(l2_size))(conv1)
  BN=BatchNormalization(axis=-1)(conv2)
  ActFunc=Activation(activation)(BN)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc)
  # out=Dropout(drop_size)(pool1)

  return pool1

def define_SMILE(l2_size,drop_size):


  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)

  flat=Flatten()(drop1)
  dense=Dense(denseSize)(flat)
################################################################
  dim_data =int(vectorsize*(vectorsize+1)/2)-18
  vector_input = Input((dim_data,))
  # Concatenate the convolutional features and the vector input
  concat_layer= Concatenate()([flat,vector_input])
  denseout = Dense(100)(concat_layer)
  denseout2 = Dense(50)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)

  # define a model with a list of two inputs
  model = Model(inputs=[input1, vector_input], outputs=output)
  model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])
  return model

def define_CNN(l2_size,drop_size):

  vectorsize=18
  input_shape=(1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)

  denseout = Dense(denseSize)(flat)
  denseout2 = Dense(denseSize)(denseout)
  drop2=Dropout(0.5)(denseout2)
  output = Dense(1, activation='sigmoid')(drop2)
  # define a model with a list of two inputs
  model = Model(inputs=input1, outputs=output)
  model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])
  return model

def define_2DCNN():


  model = Sequential()
  model.add(Conv2D(8, (1, 3), input_shape=(18,1024,1)))
  # print(input_shape)
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(1,2)))


  model.add(Conv2D(8,(1, 3)))
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(8,(1, 3)))
  model.add(Conv2D(8,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(1,2)))


  model.add(Conv2D(16,(1, 3)))
  model.add(Conv2D(16,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(16,(1, 3)))
  model.add(Conv2D(16,(2, 1)))
  model.add(BatchNormalization(axis=-1))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))


  model.add(Conv2D(8,(1, 1)))
  model.add(Dropout(0.25))
  model.add(Flatten())

  model.add(Dense(8))
  model.add(Dense(8))
  model.add(Dropout(0.5))

  model.add(Dense(1))
  model.add(Activation('sigmoid'))
  model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])

  return model

def CNN_Spectrogram(filtNo1,filtNo2,filtsize,input_shape,activation,PoolSize,denseSize):

  input1 = Input(input_shape)
  BN1=BatchNormalization(axis=-1)(input1)
  conv1 = Conv1D(filtNo1,filtsize)(BN1)
  ActFunc1=Activation(activation)(conv1)

  BN2=BatchNormalization(axis=-1)(ActFunc1)
  conv2 = Conv1D(filtNo1, filtsize)(BN2)
  ActFunc2=Activation(activation)(conv2)
  pool1=MaxPooling1D(pool_size=PoolSize)(ActFunc2)

  BN3=BatchNormalization(axis=-1)(pool1)
  conv3 = Conv1D(filtNo2, filtsize)(BN3)
  ActFunc3=Activation(activation)(conv3)
  pool3=AveragePooling1D(pool_size=PoolSize)(ActFunc3)


  drop=Dropout(0.5)(pool3)
  flat=Flatten()(drop)
  dense=Dense(denseSize)(flat)
  output = Dense(1, activation='sigmoid')(dense)
  model = Model(inputs=input1, outputs=output)
  model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])
  return model


def define_model_CNNGRU(l2_size,drop_size):


  memory=3
  vectorsize=18
  input_shape=(1024,18)
  input_shape_GRU=(memory,1024,18)
  denseSize=8
  activation='relu'
  filtsize1=22
  filtNo1=8
  filtsize2=10
  filtNo2=16
  PoolSize=2
  input1 = Input(input_shape)
  inputGRU=Input(input_shape_GRU)
  model1=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,input1,activation,PoolSize,l2_size,drop_size)
  model2=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model1,activation,PoolSize,l2_size,drop_size)
  model3=Conv_BN_Act_Pool(filtNo1,filtsize2,filtsize1,model2,activation,PoolSize,l2_size,drop_size)
  model4=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model3,activation,PoolSize,l2_size,drop_size)
  model5=Conv_BN_Act_Pool(filtNo2,filtsize2,filtsize1,model4,activation,PoolSize,l2_size,drop_size)
  conv6=Conv1D(filtNo1,1)(model5)
  drop1=Dropout(0.25)(conv6)
  flat=Flatten()(drop1)
  cnn=Model(inputs=input1,outputs=flat)
  encoded_frames = TimeDistributed(cnn)(inputGRU)
  encoded_sequence = Bidirectional(GRU(50, return_sequences=True))(encoded_frames)
  output=TimeDistributed(Dense(1,activation='sigmoid'))(encoded_sequence)

  model = Model(inputs=inputGRU, outputs=output)
  model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy', metrics=['accuracy'])
  return model



def create_sub_seq(nn_input, len_ss, labels=None):

  n_seq = nn_input.shape[0]
  len_seq = nn_input.shape[1]
  n_ss = len_seq - len_ss + 1
  new_labels = []
  if nn_input.ndim == 3:
    new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2]))
  elif nn_input.ndim == 4:
    new_inp = np.zeros((n_ss*n_seq,len_ss,nn_input.shape[2], nn_input.shape[3]))
  if labels is not None:
      dim_labels = labels.shape
      if len(dim_labels) == 2:
          new_labels = np.zeros((n_ss*n_seq, len_ss))
      elif len(dim_labels) == 3:
          new_labels = np.zeros((n_ss * n_seq, len_ss, dim_labels[2]))
  k = 0
  for i in range(n_seq):
      for j in range(n_ss):
          new_inp[k] = nn_input[i, j:j + len_ss, :]
          if labels is not None:
              if len(dim_labels) == 2:
                  new_labels[k, :] = labels[i, j:j + len_ss]
              elif len(dim_labels) == 3:
                  new_labels[k, :, :] = labels[i, j:j + len_ss, :]
          k += 1
  return new_inp, n_ss, new_labels

def sample_weight_func(y):

    from sklearn.utils import class_weight
    cw = class_weight.compute_class_weight('balanced', np.unique(y),np.ravel(y))
    sample_weight = np.zeros_like(y)
    sample_weight[y == 0] = cw[0]
    sample_weight[y == 1] = cw[1]

    return sample_weight

def dataloader(x,mi,y,spectrogram, seq_len, cnn,smile,diff):

  spec=[]
  MI_all=[]
  X=[]
  Y=[]
  MI_diff_all=[]
  # print('flag')
  y=np.transpose(y)
  start_idx = np.argmax(y>0)
  a = y == 1
  end_idx = len(a) - np.argmax(np.flip(a)) - 1
  real_y = np.zeros_like(y)
  real_y[start_idx:end_idx+1] = 1
  MI=np.zeros((mi.shape[0],153))
  for j in range(mi.shape[0]):
    mi2=mi[j,:,:]
    mi_mod=list(mi2[np.triu_indices(18,k=1)])
    MI[j,:]=mi_mod
  MI_diff=[]
  if seq_len > 1:
    real_y = np.expand_dims(real_y, axis=0)
    x = np.expand_dims(x, axis=0)
    MI = np.expand_dims(MI, axis=0)
    print('flag')
    x, _ , real_y = create_sub_seq(x, seq_len, labels=real_y)
    MI, _, _ = create_sub_seq(MI, seq_len)

  if diff is not None:
    for j in range(MI.shape[0]-1):
      MI_diff.append(MI[j+1]-MI[j])
    MI_diff=np.array(MI_diff)
    MI=MI[1:]
    x=x[1:]
    real_y=real_y[1:]
    spectrogram=spectrogram[1:]



  return x,real_y,MI,MI_diff,spectrogram

# def FineTuning(SaveResults,modelname,fold_no,x1,y1,mi1,mi_diff1,batchsize,epoch,Xtest,MItest,MItest_diff,cnn,smile,diff):
#
#   if cnn==1:
#     X_train=x1
#     X_test=Xtest
#
#   if smile==1:
#     X_train=[x1,mi1]
#     X_test=[Xtest,MItest]
#
#   if diff==1:
#
#     X_train=[x1,mi1,mi_diff1]
#
#     X_test=[Xtest,MItest,MItest_diff]
#
#   ModelName=modelname+str(fold_no)+'.h5'
#   model=tf.keras.models.load_model(os.path.join(SaveResults,ModelName))
#   sample_weights=sample_weight_func(y1)
#   model.fit(X_train,y1, validation_split=0, batch_size=batchsize, epochs=epoch, sample_weight=sample_weights, verbose = 2)
#   ypred=model.predict(X_test)
#
#   return ypred,model

def ReadMatFiles(dirname,dirname2,SaveResults,indx, testindx,fold_no,modelname,batchsize,epoch ,cnn,smile,diff,seq_len):



  EDF=[]
  EDFFiles=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]
  ind=[]

  Ytest_all=[]
  Ypred_all=[]

  Xtest=[]
  Ytest=[]
  MItest=[]
  MItest_diff=[]
  print(Name[testindx])
    # print(j)
  ind = [i for i, elem in enumerate(EDF) if Name[testindx] in elem]
  #   ind.append(indices)
  print(ind)
  # ind=np.concatenate(ind,axis=0)
  cnt=0

  X_train=[]
  Y_train=[]
  MI_train=[]
  MI_train_diff=[]
  Spec_train=[]
  shapes=[]
  # print(EDF[ind[k]])
  for z in ind:
    mat=loadmat(os.path.join(dirname,EDF[int(z)]))
    x=mat['X_4sec']
    shape1=x.shape[0]
    shapes.append(shape1)
  MediumShape=min(shapes, key=lambda x:abs(x-statistics.median(shapes)))
  index = shapes.index(MediumShape)
  matfile_test=loadmat(os.path.join(dirname,EDF[int(ind[index])]))
  print('test ', EDF[int(ind[index])])
  time.sleep(1)
  matfile_test2=loadmat(os.path.join(dirname2,EDF[int(ind[index])]))
  spectrogram_test=matfile_test2['spectogram']
  # print(EDF[int(ind[k][index])])
  xtest=matfile_test['X_4sec']
  ytest=matfile_test['Y_label_4sec']
  mitest=matfile_test['estimated_MI']
  X_test,Y_test,MI_test,MI_test_diff,Spec_test=dataloader(xtest,mitest,ytest,spectrogram_test,seq_len,cnn,smile,diff)
  # print(X_test.shape)
  for q in [p for p in ind if p != ind[index]]:
    matfile=loadmat(os.path.join(dirname,EDF[q]))
    matfile_test2=loadmat(os.path.join(dirname2,EDF[q]))
    spectrogram_train=matfile_test2['spectogram']
    print('train ',EDF[q])
    xtrain=matfile['X_4sec']
    ytrain=matfile['Y_label_4sec']
    mitrain=matfile['estimated_MI']
    Xtrain,Ytrain,MItrain,MI_difftrain,spectrogramtrain=dataloader(xtrain,mitrain,ytrain,spectrogram_train,seq_len,cnn,smile,diff)
    # print(Ytrain.shape)
    X_train.append(Xtrain)
    MI_train.append(MItrain)
    MI_train_diff.append(MI_difftrain)
    Y_train.append(Ytrain)
    Spec_train.append(spectrogramtrain)
  X_train=np.concatenate(X_train,axis=0)
  Y_train=np.concatenate(Y_train,axis=0)
  MI_train=np.concatenate(MI_train,axis=0)
  MI_train_diff=np.concatenate(MI_train_diff,axis=0)
  Spec_train=np.concatenate(Spec_train,axis=0)
  # ypred,model=FineTuning(SaveResults,modelname,fold_no,x1,y1,mi1,mi_diff1,batchsize,epoch,Xtest,MItest,MItest_diff,cnn,smile,diff)
  # Ypred_all.append(ypred)
  # Ytest_all.append(Ytest)
  return X_train,Y_train,MI_train, Spec_train,X_test,Y_test,MI_test,Spec_test

def MeanStdVar(mylist):

  ListMean=np.mean(mylist,axis=0)
  ListStd=np.std(mylist)
  ListVar=np.var(mylist)

  return ListMean,ListStd,ListVar


def ModelTrain(dirname,dirname2,SaveResults,SaveHisResults,indx,modelname,batchsize,epoch,seq_len,cnn,smile,diff,twodcnn,spectrogram,gru,l2_size,drop_size,batchSize):
  loss=[]
  loss_val=[]
  acc=[]
  acc_val=[]

  fpr=[]
  tpr=[]
  PR=[]
  ROC=[]
  pred=[]
  act=[]
  fscore=[]
  # batchsize=256
  # epoch=100

  start_time = time.time()
  fold_no=0



  # kfold = KFold(n_splits=FoldNum, shuffle=False)

  th=0.5
  test=[]
  fold_no=0
  for trainindx in range(24):
    # test.append(testindx)

    fold_no=fold_no+1
    # print(fold_no)
    Xtrain,Ytrain,MItrain, Spectrain,Xtest,Ytest,MItest,Spectest=ReadMatFiles(dirname,dirname2,SaveResults,indx,trainindx, fold_no,modelname,batchsize,epoch ,cnn,smile,diff,seq_len)
    # time.sleep(3)
    if cnn==1:
      tf.keras.backend.clear_session()
      model=define_CNN(l2_size,drop_size)
      X_train=Xtrain
      X_test=Xtest


    if smile==1:
      tf.keras.backend.clear_session()
      model=define_SMILE(l2_size,drop_size)
      X_train=[Xtrain,MItrain]
      X_test=[Xtest,MItest]


    if twodcnn==1:

      tf.keras.backend.clear_session()
      model=define_2DCNN()
      Xtrain=Xtrain.reshape(Xtrain.shape[0],Xtrain.shape[2],Xtrain.shape[1],1)
      Xtest=Xtest.reshape(Xtest.shape[0],Xtest.shape[2],Xtest.shape[1],1)
      X_train=Xtrain
      X_test=Xtest

#
    if spectrogram==1:

      tf.keras.backend.clear_session()
      model=CNN_Spectrogram(filtNo1=120,filtNo2=160,filtsize=5,input_shape=(1024,18),activation='relu',PoolSize=3,denseSize=8)

      X_train=Spectrain
      X_test=Spectest


    ##################################################################
    from sklearn.utils import class_weight
    cw = class_weight.compute_class_weight('balanced', np.unique(Ytrain),np.ravel(Ytrain))
    print(cw)
    class_weights = {0:cw[0], 1: cw[1]}


    if gru==1:

      tf.keras.backend.clear_session()
      model=define_model_CNNGRU(l2_size,drop_size)
      X_train=Xtrain
      X_test=Xtest

      from sklearn.utils import class_weight
      cw = class_weight.compute_class_weight('balanced', np.unique(Ytrain),np.ravel(Ytrain))
      sample_weight = np.zeros_like(Ytrain)
      sample_weight[Ytrain == 0] = cw[0]
      sample_weight[Ytrain == 1] = cw[1]



    if gru==1:
      history=model.fit(X_train, Ytrain, validation_data=(X_test,Ytest), batch_size=batchsize, epochs=epoch, sample_weight=sample_weight, verbose = 2)
    else:

      history=model.fit(X_train, Ytrain, validation_data=(X_test,Ytest), batch_size=batchsize, epochs=epoch, class_weight=class_weights, verbose = 2)



    model.save(SaveResults+'/'+modelname+'_fold'+str(fold_no)+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize)+'.h5')

    loss.append(history.history['loss'])
    loss_val.append(history.history['val_loss'])

    acc.append(history.history['accuracy'])
    acc_val.append(history.history['val_accuracy'])

    # fold_no=fold_no+1
    tf.keras.backend.clear_session()
#############################################
  loss_mean,loss_std,_=MeanStdVar(loss)
  loss_val_mean,loss_val_std,_=MeanStdVar(loss_val)
  acc_mean,acc_std,_=MeanStdVar(acc)
  acc_val_mean,acc_val_std,_=MeanStdVar(acc_val)


  np.savez(os.path.join(SaveHisResults, 'HistoryRes_'+modelname+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize)), loss=loss, loss_val=loss_val, accuracy=acc, accuracy_val=acc_val)

  plt.plot(acc_mean)
  plt.plot(acc_val_mean)
  plt.title(modelname+'_loss'+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize))
  plt.legend(['train', 'test'], loc='upper left')

  plt.fill_between(range(epoch), acc_mean-acc_std, acc_mean+acc_std, color='blue', alpha = 0.5)
  plt.fill_between(range(epoch), acc_val_mean-acc_val_std, acc_val_mean+acc_val_std, color='orange', alpha = 0.5)

  plt.ylabel('%')
  plt.xlabel('epoch')
  plt.savefig(SaveHisResults+'/'+'history_'+modelname+'_accuracy'+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize)+'.pdf', format='pdf', bbox_inches = 'tight')
  plt.clf()

  plt.plot(loss_mean)
  plt.plot(loss_val_mean)
  plt.title(modelname+'_loss'+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize))
  plt.legend(['train', 'test'], loc='upper left')

  plt.fill_between(range(epoch), loss_mean-loss_std, loss_mean+loss_std, color='blue', alpha = 0.5)
  plt.fill_between(range(epoch), loss_val_mean-loss_val_std, loss_val_mean+loss_val_std, color='orange', alpha = 0.5)

  plt.ylabel('%')
  plt.xlabel('epoch')
  plt.savefig(SaveHisResults+'/'+'history_'+modelname+'_loss'+'_epoch_'+str(epoch)+'_l2Size_'+str(l2_size)+'_DropSize_'+str(drop_size)+'_batchsize_'+str(batchSize)+'.pdf', format='pdf', bbox_inches = 'tight')
  plt.clf()


  print("--- %s seconds ---" % (time.time() - start_time))

i=0
k=None
j=256

dirname2='/media/datadrive/bsalafian/AllMatFiles'

dirname='/media/datadrive/bsalafian/6FoldCrossSMILE'

SaveResults='/home/baharsalafian/CNNSMILEGRUModels_24Models_JBHI_Losstest'

SaveHisResults='/home/baharsalafian/History_24Models_JBHI_Losstest'
# seq_len=7
ModelTrain(dirname,dirname2,SaveResults,SaveHisResults,'train_finetune_medium','CNNGRU10times_lr.0001',batchsize=256,epoch=20,seq_len=3,cnn=0,smile=0,diff=0,twodcnn=0,spectrogram=0,gru=1,l2_size=k,drop_size=i,batchSize=j)

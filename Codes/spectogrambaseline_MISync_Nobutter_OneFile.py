# -*- coding: utf-8 -*-
"""SpectogramBaselineModel1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_Ca3Jz6pas3yFc_aWjlNTHtXA1NfbJd
"""

import os
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="4"
import sys
from keras.models import Model
import tensorflow as tf
import scipy
import h5py
import glob
from scipy.io import loadmat,savemat
import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import InputLayer
from keras.layers import Input
from keras.layers import Input
import time
# from google.colab import drive

# drive.mount('/content/drive')

from scipy.signal import butter, lfilter

def LoadData(dirname,Name):

  matFile1 = loadmat(os.path.join(dirname, Name))
  DenoisedSig=matFile1['DenoisedSig']
  Fs=matFile1['Fs']
  Siezure_start=matFile1['Siezure_start']
  Siezure_end=matFile1['Siezure_end']
  Sig_start=matFile1['Sig_start']
  Sig_end=matFile1['Sig_end']
  DenoisedSigSeizure= np.transpose(DenoisedSig)

  return DenoisedSig,Fs[0][0],Siezure_start[0][0],Siezure_end[0][0],Sig_start[0][0],Sig_end[0][0]


def Label(dirname,Name,WindowSize1,WindowSize2,DenoisedSig):


  _,Fs,Siezure_start,Siezure_end,Sig_start,Sig_end = LoadData(dirname,Name)

  n_channels= DenoisedSig.shape[1]

  # X=np.zeros((np.int64(Sig_end)-np.int64(Sig_start)-WindowSize+1,n_channels,WindowSize*Fs))

  # Ylabel=np.zeros((np.int64(Sig_end)-np.int64(Sig_start)-WindowSize+1,1))

  n1=1
  n2=1+WindowSize1
  s=Siezure_start-Sig_start+1
  e=Siezure_end-Sig_start+1
  t1 = 0
  t2 = WindowSize1*Fs
  X=[]
  Ylabel=[]
  Ylabel_4sec=[]
  Sup=DenoisedSig.shape[0]
  k=0

  while t2 <= Sup:


    X.append(DenoisedSig[t1:min(t2,Sup),:])


    n11=n2-WindowSize2

    if  (n2<=s or n11>=e):

      Ylabel_4sec.append(0)

    elif (n11<s and n2<e):

      Ylabel_4sec.append(min(n2-s,e-s,WindowSize2)/WindowSize2)

    elif (n11>=s and n2<=e):

      Ylabel_4sec.append(1)

    elif n2>=e:

      Ylabel_4sec.append(min(e-n11,e-s)/WindowSize2)

    if t2+Fs > Sup:

      X=np.array(X)
      X_4sec=X[:,-1024::,:]

    t2 = t2 + Fs
    t1 = t1 + Fs
    n2=n2+1
    n1=n1+1
    k  = k + 1


  Ylabel_4sec=np.array(Ylabel_4sec)
  return X_4sec,Ylabel_4sec


def butter_bandpass(lowcut, highcut, fs, order=5):

  nyq = 0.5 * fs
  low = lowcut / nyq
  high = highcut / nyq
  b, a = butter(order, [low, high], btype='band')
  return b, a


def butter_bandpass_filter(data, lowcut, highcut, fs, order=5):

  b, a = butter_bandpass(lowcut, highcut, fs, order=order)
  y = lfilter(b, a, data)
  return y

def DFT(x):


  N = len(x)
  n = np.arange(N)
  k = n.reshape((N, 1))
  e = np.exp(-2j * np.pi * k * n / N)

  X = np.dot(e, x)

  return X

def butterworth_denoise(dirname,Name,WindowSize,fs,lowcut,highcut):


  DenoisedSig,_,_,_,_,_=LoadData(dirname,Name)


  x=np.transpose(DenoisedSig,(1,0))

  y=np.zeros_like(x)

  for i in range(x.shape[1]):

    sig=x[:,i]
    data=sig

    sig_denoised=butter_bandpass_filter(data, lowcut, highcut, fs, order=5)

    y[:,i]=sig_denoised

  return y

def Get_DFT(X):

  X_DFT=np.zeros_like(X)

  for i in range(X.shape[2]):

    for j  in range(X.shape[0]):

      # print(len(X[j,:,i]))
      X_DFT[j,:,i]=abs(DFT(X[j,:,i]))

  return X_DFT

def PatientsName():
    Name=['chb01','chb02','chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10',
    'chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21',
    'chb22','chb23','chb24']

    return Name

def PatientsEDFFile(dirname):

    os.chdir(dirname)
    a=[]
    X=[]
    Y=[]
    k=0
    for file in glob.glob("*.mat"):

        a.append(file)
        # print(a)

    return a

def ReadMatFiles(dirname,indx):

  EDF=[]
  Name=[]
  EDF=PatientsEDFFile(dirname)
  Name=PatientsName()
  Xfile=[]
  Yfile=[]


  indices = [i for i, elem in enumerate(EDF) if Name[indx] in elem]

  return indices,EDF

def DFT_Calculate(dirname,savedir,WindowSize1,WindowSize2,train_indx,lowcut,highcut,fs):
  start_time = time.time()

  FoldNum=6
  kfold = KFold(n_splits=FoldNum, shuffle=False)
  train=[]
  c=0
  # train_indx=0


  Name='chb01_26_1MI_RollWindow32_NNdim32_FoldNo1_MaxEpoch200_MinEpoch35.mat'
  print(Name)
  matfile=loadmat(os.path.join(dirname,Name))
  X=matfile['X_4sec']
      # time.sleep(2)
      # x=butterworth_denoise(dirname,Name,WindowSize2,fs,lowcut,highcut)

      # X,Y=Label(dirname,Name,WindowSize1,WindowSize2,x)
############uncomment##################
  X_DFT=Get_DFT(X)

  Name2=Name.split('.')
  savemat(os.path.join(savedir, Name2[0]+'_Spectogram.mat'), {"spectogram":X_DFT})

  print(Name2[0])
#########################################
  print("--- %s seconds ---" % (time.time() - start_time))


    # X_train,Y_train,X_4sec,Ylabel_4sec=Label(dirname,EDFFiles[indices[file_idx]],WindowSize[q],WindowSize2)

dirname='/home/baharsalafian/6FoldCrossSMILE'

savedir='/home/baharsalafian/SpectogramResultsSyncMI_Nobutter'

DFT_Calculate(dirname,savedir,WindowSize1=32,WindowSize2=4,train_indx=5,lowcut=0.5,highcut=127,fs=256)
